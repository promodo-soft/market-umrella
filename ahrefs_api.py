import http.client
import json
import logging
from datetime import datetime, timedelta
from config import AHREFS_API_KEY, AHREFS_API_URL

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API
_api_limit_reached = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("ahrefs_api.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def is_api_limit_reached():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –ª–∏–º–∏—Ç API"""
    return _api_limit_reached

def reset_api_limit_flag():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥ –ª–∏–º–∏—Ç–∞ API (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞)"""
    global _api_limit_reached
    _api_limit_reached = False
    logger.info("–§–ª–∞–≥ –ª–∏–º–∏—Ç–∞ API —Å–∫–∏–Ω—É—Ç–æ")

def get_api_limit_message():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤ API –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    if _api_limit_reached:
        return "üö´ *–£–≤–∞–≥–∞!*\n\n–î–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç API Ahrefs!\n\n" \
               "üìä –ó–±—ñ—Ä –¥–∞–Ω–∏—Ö —Ç—Ä–∞—Ñ—ñ–∫—É –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ –¥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—ñ–≤.\n" \
               "‚è∞ –õ—ñ–º—ñ—Ç–∏ –∑–∞–∑–≤–∏—á–∞–π –æ–Ω–æ–≤–ª—é—é—Ç—å—Å—è —â–æ–¥–Ω—è –æ 00:00 UTC.\n\n" \
               "üîÑ –ù–∞—Å—Ç—É–ø–Ω–∞ —Å–ø—Ä–æ–±–∞ –±—É–¥–µ –≤–∏–∫–æ–Ω–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞ —Ä–æ–∑–∫–ª–∞–¥–æ–º."
    return None

def _set_api_limit_reached(status_code, response_text=""):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥ –ª–∏–º–∏—Ç–∞ API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏ 403"""
    global _api_limit_reached
    if status_code == 403:
        _api_limit_reached = True
        logger.error(f"üö´ –õ–Ü–ú–Ü–¢ API –î–û–°–Ø–ì–ù–£–¢–û! –°—Ç–∞—Ç—É—Å: {status_code}. –ü–æ–¥–∞–ª—å—à—ñ –∑–∞–ø–∏—Ç–∏ –±—É–¥—É—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω—ñ.")
        logger.error(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å API: {response_text}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö
        if "API units limit reached" in response_text:
            logger.error("üí• API UNITS LIMIT EXCEEDED - –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—á–µ–∫–∞—Ç–∏ –¥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—ñ–≤")
        elif "Rate limit" in response_text:
            logger.error("‚è∞ RATE LIMIT EXCEEDED - –∑–∞–±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤ –∑–∞ –∫–æ—Ä–æ—Ç–∫–∏–π —á–∞—Å")
        
        return True
    return False

def get_current_organic_traffic(domain):
    """
    –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¢–ï–ö–£–©–ò–ô –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π —Ç—Ä–∞—Ñ–∏–∫ –¥–ª—è –¥–æ–º–µ–Ω–∞.
    –í–º–µ—Å—Ç–æ –∑–∞–ø—Ä–æ—Å–∞ –º–µ—Å—è—á–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.
    
    Args:
        domain (str): –î–æ–º–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        int: –ó–Ω–∞—á–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ –∏–ª–∏ 0 –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –ª–∏–º–∏—Ç API
    if _api_limit_reached:
        logger.warning(f"[{domain}] ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–ø–∏—Ç - –ª—ñ–º—ñ—Ç API –≤–∂–µ –¥–æ—Å—è–≥–Ω—É—Ç–æ")
        return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –≤–º–µ—Å—Ç–æ 0 –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
    
    response_text = None
    try:
        if not AHREFS_API_KEY:
            logger.error("AHREFS_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
            return 0
        
        logger.info(f"[{domain}] –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ò–ô –∑–∞–ø–∏—Ç - –æ—Ç—Ä–∏–º—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Ç—Ä–∞—Ñ—ñ–∫")

        conn = http.client.HTTPSConnection("api.ahrefs.com")
        
        headers = {
            'Accept': "application/json",
            'Authorization': f"Bearer {AHREFS_API_KEY}"
        }
        
        # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –∏—Å–ø–æ–ª—å–∑—É–µ–º metrics endpoint —Å volume_mode=average –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        current_date = datetime.now().strftime('%Y-%m-%d')
        endpoint = f"/v3/site-explorer/metrics?target={domain}&mode=domain&volume_mode=average&date={current_date}"
        
        logger.info(f"[{domain}] –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π endpoint: {endpoint}")
        
        conn.request("GET", endpoint, headers=headers)
        response = conn.getresponse()
        data = response.read()
        response_text = data.decode("utf-8")
        
        logger.info(f"[{domain}] –°—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {response.status}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ª–∏–º–∏—Ç API (403)
        if _set_api_limit_reached(response.status, response_text):
            return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤
        
        if response.status == 200:
            try:
                json_data = json.loads(response_text)
            except json.JSONDecodeError as e:
                logger.error(f"[{domain}] –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON: {e}")
                logger.error(f"[{domain}] –ü–µ—Ä—à—ñ 500 —Å–∏–º–≤–æ–ª—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {response_text[:500]}")
                return 0
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (GitHub Actions –∑–∞–º–∞—Å–∫–∏—Ä—É–µ—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
            logger.info(f"[{domain}] –£—Å–ø—ñ—à–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {response_text}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –¥–µ—Ç–∞–ª—å–Ω–æ
            logger.info(f"[{domain}] –¢–∏–ø –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {type(json_data)}")
            logger.info(f"[{domain}] –ö–ª—é—á—ñ –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ä—ñ–≤–Ω—è: {list(json_data.keys()) if isinstance(json_data, dict) else '–ù–µ —Å–ª–æ–≤–Ω–∏–∫'}")
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –∫–æ—Ä–Ω—è (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º API)
            traffic = json_data.get("org_traffic", 0) if isinstance(json_data, dict) else 0
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –∫–æ—Ä–Ω–µ, –∏—â–µ–º –≤ metrics
            if traffic == 0 and isinstance(json_data, dict) and "metrics" in json_data:
                metrics = json_data.get("metrics", {})
                logger.info(f"[{domain}] –ó–Ω–∞–π–¥–µ–Ω–æ –æ–±'—î–∫—Ç metrics, –∫–ª—é—á—ñ: {list(metrics.keys()) if isinstance(metrics, dict) else '–ù–µ —Å–ª–æ–≤–Ω–∏–∫'}")
                traffic = metrics.get("org_traffic", 0) if isinstance(metrics, dict) else 0
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –º–æ–∂–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ metrics.metrics
            if traffic == 0 and isinstance(json_data, dict):
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ org_traffic
                def find_org_traffic(obj, path=""):
                    if isinstance(obj, dict):
                        if "org_traffic" in obj:
                            logger.info(f"[{domain}] –ó–Ω–∞–π–¥–µ–Ω–æ org_traffic –ø–æ —à–ª—è—Ö—É {path}: {obj['org_traffic']}")
                            return obj["org_traffic"]
                        for key, value in obj.items():
                            result = find_org_traffic(value, f"{path}.{key}")
                            if result is not None:
                                return result
                    return None
                
                found_traffic = find_org_traffic(json_data)
                if found_traffic is not None:
                    traffic = found_traffic
            
            logger.info(f"[{domain}] –§—ñ–Ω–∞–ª—å–Ω–∏–π —Ç—Ä–∞—Ñ—ñ–∫: {traffic}")
            return int(traffic)
            
        elif response.status == 401:
            logger.error(f"[{domain}] –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó API Ahrefs")
            logger.error(f"[{domain}] –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response_text}")
            return 0
        elif response.status == 429:
            logger.error(f"[{domain}] –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ API Ahrefs")
            logger.error(f"[{domain}] –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response_text}")
            return 0
        else:
            logger.error(f"[{domain}] –ü–æ–º–∏–ª–∫–∞ API Ahrefs ({response.status})")
            logger.error(f"[{domain}] –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response_text}")
            return 0
            
    except json.JSONDecodeError as e:
        logger.error(f"[{domain}] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑–±–æ—Ä—ñ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {str(e)}")
        if response_text:
            logger.error(f"[{domain}] –û—Ç—Ä–∏–º–∞–Ω–∏–π —Ç–µ–∫—Å—Ç: {response_text}")
        return 0
    except Exception as e:
        logger.error(f"[{domain}] –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")
        import traceback
        logger.error(f"[{domain}] Traceback: {traceback.format_exc()}")
        return 0
    finally:
        conn.close()

def get_batch_organic_traffic(domains_batch):
    """
    –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô BATCH –ó–ê–ü–†–û–°: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π /batch-analysis endpoint.
    –ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–∞—Ñ–∏–∫ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–æ–º–µ–Ω–æ–≤ –∑–∞ –æ–¥–∏–Ω API –≤—ã–∑–æ–≤ —Å volume_mode=average.
    
    Args:
        domains_batch (list): –°–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤ (–º–∞–∫—Å–∏–º—É–º 50 –¥–æ–º–µ–Ω–æ–≤ –∑–∞ —Ä–∞–∑)
        
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å {domain: traffic_value}
    """
    results = {}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –ª–∏–º–∏—Ç API
    if _api_limit_reached:
        logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ BATCH –∑–∞–ø–∏—Ç –¥–ª—è {len(domains_batch)} –¥–æ–º–µ–Ω—ñ–≤ - –ª—ñ–º—ñ—Ç API –≤–∂–µ –¥–æ—Å—è–≥–Ω—É—Ç–æ")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤
        for domain in domains_batch:
            results[domain] = 0
        return results
    
    if not AHREFS_API_KEY:
        logger.error("AHREFS_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
        return results
    
    if not domains_batch:
        return results
        
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä batch –¥–æ 50 –¥–æ–º–µ–Ω–æ–≤
    batch_size = min(len(domains_batch), 50)
    current_batch = domains_batch[:batch_size]
    
    logger.info(f"BATCH ANALYSIS –∑–∞–ø–∏—Ç –¥–ª—è {len(current_batch)} –¥–æ–º–µ–Ω—ñ–≤: {current_batch}")
    
    try:
        conn = http.client.HTTPSConnection("api.ahrefs.com")
        
        headers = {
            'Accept': "application/json",
            'Authorization': f"Bearer {AHREFS_API_KEY}",
            'Content-Type': "application/json"
        }
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π batch endpoint —Å POST –∑–∞–ø—Ä–æ—Å–æ–º
        endpoint = "/v3/site-explorer/batch-analysis"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º JSON body –¥–ª—è batch –∑–∞–ø—Ä–æ—Å–∞
        request_body = {
            "targets": current_batch,
            "mode": "domain",
            "volume_mode": "average",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∂–∏–º average –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ
            "date": datetime.now().strftime('%Y-%m-%d')  # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
        }
        
        json_body = json.dumps(request_body)
        logger.info(f"BATCH endpoint: {endpoint}")
        logger.info(f"BATCH body: {json_body}")
        
        conn.request("POST", endpoint, body=json_body, headers=headers)
        response = conn.getresponse()
        data = response.read()
        response_text = data.decode("utf-8")
        
        logger.info(f"BATCH —Å—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {response.status}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ª–∏–º–∏—Ç API (403) –¥–ª—è batch –∑–∞–ø—Ä–æ—Å–∞
        if _set_api_limit_reached(response.status, response_text):
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤ –≤ batch
            for domain in current_batch:
                results[domain] = 0
            return results
        
        if response.status == 200:
            json_data = json.loads(response_text)
            logger.info(f"BATCH —É—Å–ø—ñ—à–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–∞")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º batch –æ—Ç–≤–µ—Ç - –æ–∂–∏–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤
            if isinstance(json_data, list):
                for idx, domain_data in enumerate(json_data):
                    target = domain_data.get("target", "")
                    
                    # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ org_traffic –≤ –æ–±—ä–µ–∫—Ç–µ
                    def find_org_traffic(obj, path=""):
                        if isinstance(obj, dict):
                            if "org_traffic" in obj:
                                return obj["org_traffic"]
                            for key, value in obj.items():
                                result = find_org_traffic(value, f"{path}.{key}")
                                if result is not None:
                                    return result
                        return None
                    
                    traffic = find_org_traffic(domain_data)
                    if traffic is None:
                        traffic = 0
                        logger.warning(f"[BATCH] –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ org_traffic –¥–ª—è {target} –≤ –æ–±'—î–∫—Ç—ñ {idx}")
                    
                    if target:
                        results[target] = int(traffic)
                        logger.info(f"[BATCH] {target}: {traffic}")
            else:
                # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                logger.warning(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ BATCH: {json_data}")
                
        else:
            logger.error(f"BATCH –ø–æ–º–∏–ª–∫–∞ API Ahrefs ({response.status})")
            logger.error(f"BATCH –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {response_text}")
            
            # Fallback: –ø—Ä–æ–±—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ª–∏–º–∏—Ç –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç
            if not _api_limit_reached:
                logger.info("Fallback –¥–æ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤")
                for domain in current_batch:
                    results[domain] = get_current_organic_traffic(domain)
                    # –ï—Å–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º
                    if _api_limit_reached:
                        logger.warning("–õ—ñ–º—ñ—Ç API –¥–æ—Å—è–≥–Ω—É—Ç–æ –ø—ñ–¥ —á–∞—Å fallback –∑–∞–ø–∏—Ç—ñ–≤. –ü—Ä–∏–ø–∏–Ω—è—î–º–æ –æ–±—Ä–æ–±–∫—É.")
                        break
            else:
                # –ï—Å–ª–∏ –ª–∏–º–∏—Ç —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–ª–∏
                for domain in current_batch:
                    results[domain] = 0
                
    except Exception as e:
        logger.error(f"BATCH –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")
        import traceback
        logger.error(f"BATCH traceback: {traceback.format_exc()}")
        # Fallback: –ø—Ä–æ–±—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ª–∏–º–∏—Ç –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç
        if not _api_limit_reached:
            logger.info("Fallback –¥–æ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É")
            for domain in current_batch:
                results[domain] = get_current_organic_traffic(domain)
                # –ï—Å–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º
                if _api_limit_reached:
                    logger.warning("–õ—ñ–º—ñ—Ç API –¥–æ—Å—è–≥–Ω—É—Ç–æ –ø—ñ–¥ —á–∞—Å fallback –∑–∞–ø–∏—Ç—ñ–≤ —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É. –ü—Ä–∏–ø–∏–Ω—è—î–º–æ –æ–±—Ä–æ–±–∫—É.")
                    break
        else:
            # –ï—Å–ª–∏ –ª–∏–º–∏—Ç —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–ª–∏
            for domain in current_batch:
                results[domain] = 0
    finally:
        conn.close()
        
    return results

# –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –¥–µ–ª–∞–µ–º –µ–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π
def get_organic_traffic(domain):
    """
    –£–°–¢–ê–†–ï–í–®–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
    –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π endpoint.
    """
    return get_current_organic_traffic(domain)

def check_api_availability():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API Ahrefs –∏—Å–ø–æ–ª—å–∑—É—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π endpoint.
    """
    try:
        logger.info("–ü–æ—á–∞—Ç–æ–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ API Ahrefs")
        if not AHREFS_API_KEY:
            logger.error("AHREFS_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ (–≤ —Ñ—É–Ω–∫—Ü—ñ—ó check_api_availability)")
            return False
            
        logger.info(f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–ª—é—á AHREFS_API_KEY (–ø–µ—Ä—à—ñ 4 —Å–∏–º–≤–æ–ª–∏: {AHREFS_API_KEY[:4]}, –¥–æ–≤–∂–∏–Ω–∞: {len(AHREFS_API_KEY)})")
        
        conn = http.client.HTTPSConnection("api.ahrefs.com")
        
        headers = {
            'Accept': "application/json",
            'Authorization': f"Bearer {AHREFS_API_KEY}"
        }
        
        # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –∏—Å–ø–æ–ª—å–∑—É–µ–º metrics endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API
        current_date = datetime.now().strftime('%Y-%m-%d')
        endpoint = f"/v3/site-explorer/metrics?target=ahrefs.com&mode=domain&volume_mode=average&date={current_date}"
        
        conn.request("GET", endpoint, headers=headers)
        response = conn.getresponse()
        response_text = response.read().decode('utf-8')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ª–∏–º–∏—Ç API (403)
        if _set_api_limit_reached(response.status, response_text):
            return False
        
        if response.status == 200:
            logger.info("API Ahrefs –¥–æ—Å—Ç—É–ø–Ω–∏–π")
            return True
        else:
            logger.error(f"API Ahrefs –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –ö–æ–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {response.status} - {response_text}")
            return False
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ API Ahrefs: {str(e)}")
        return False
    finally:
        conn.close() 