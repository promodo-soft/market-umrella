#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω–∏ —Ç—Ä–∞—Ñ—ñ–∫—É –∑ Google Sheets
"""

from test_runner import analyze_traffic_changes
from telegram_bot import send_message
import logging
import os
import json
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def get_real_traffic_data_from_sheets():
    """–û—Ç—Ä–∏–º—É—î —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ —Ç—Ä–∞—Ñ—ñ–∫—É –∑ Google Sheets"""
    try:
        # ID —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        from config import MAIN_SHEET_ID
        SPREADSHEET_ID = MAIN_SHEET_ID
        
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è
        credentials_json = os.getenv('GOOGLE_SHEETS_CREDENTIALS')
        if not credentials_json:
            logger.error("GOOGLE_SHEETS_CREDENTIALS –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return {}
        
        credentials_dict = json.loads(credentials_json)
        credentials = Credentials.from_service_account_info(
            credentials_dict,
            scopes=['https://www.googleapis.com/auth/spreadsheets']
        )
        
        service = build('sheets', 'v4', credentials=credentials)
        
        # –ß–∏—Ç–∞—î–º–æ –¥–∞–Ω—ñ –∑ —Ç–∞–±–ª–∏—Ü—ñ
        range_name = 'A:Z'  # –ß–∏—Ç–∞—î–º–æ –≤—Å—ñ —Å—Ç–æ–≤–ø—Ü—ñ
        result = service.spreadsheets().values().get(
            spreadsheetId=SPREADSHEET_ID,
            range=range_name
        ).execute()
        
        values = result.get('values', [])
        if not values:
            logger.error("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –≤ Google Sheets")
            return {}
        
        logger.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(values)} —Ä—è–¥–∫—ñ–≤ –∑ Google Sheets")
        
        domains_data = {}
        
        for row_index, row in enumerate(values):
            if row_index == 0:  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
                continue
                
            if not row:  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ —Ä—è–¥–∫–∏
                continue
                
            domain = row[0] if len(row) > 0 else None
            if not domain:
                continue
            
            # –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —Ç—Ä–∞—Ñ—ñ–∫—É –∑ —Ä—è–¥–∫–∞ (–ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä—à–∏–π —Å—Ç–æ–≤–ø–µ—Ü—å –∑ –¥–æ–º–µ–Ω–æ–º)
            traffic_values = []
            for col_index in range(1, len(row)):
                try:
                    if row[col_index]:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –ø–æ—Ä–æ–∂–Ω—î
                        traffic_val = int(row[col_index])
                        if traffic_val >= 0:  # –î–æ–ø—É—Å–∫–∞—î–º–æ –Ω—É–ª–µ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
                            traffic_values.append(traffic_val)
                except (ValueError, TypeError):
                    continue
            
            if len(traffic_values) >= 2:
                # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –∑ —Ñ—ñ–∫—Ç–∏–≤–Ω–∏–º–∏ –¥–∞—Ç–∞–º–∏ (–ø—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ –¥–∞–Ω—ñ –π–¥—É—Ç—å –≤—ñ–¥ —Å—Ç–∞—Ä–∏—Ö –¥–æ –Ω–æ–≤–∏—Ö)
                history = []
                for i, traffic in enumerate(traffic_values):
                    history.append({
                        'date': f'2024-{(i%12)+1:02d}-{((i//12)%28)+1:02d}',  # –§—ñ–∫—Ç–∏–≤–Ω—ñ –¥–∞—Ç–∏
                        'traffic': traffic
                    })
                
                domains_data[domain] = {
                    'history': history
                }
                
                logger.info(f"–î–æ–º–µ–Ω {domain}: {len(traffic_values)} –∑–Ω–∞—á–µ–Ω—å —Ç—Ä–∞—Ñ—ñ–∫—É")
        
        logger.info(f"–û–±—Ä–æ–±–ª–µ–Ω–æ {len(domains_data)} –¥–æ–º–µ–Ω—ñ–≤ –∑ Google Sheets")
        return domains_data
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ Google Sheets: {e}")
        return {}

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    logger.info("–ó–∞–ø—É—Å–∫ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ç—Ä–∞—Ñ—ñ–∫ –∑ Google Sheets")
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ Google Sheets
    domains_data = get_real_traffic_data_from_sheets()
    
    if not domains_data:
        logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ —Ç—Ä–∞—Ñ—ñ–∫—É –∑ Google Sheets")
        return
    
    logger.info(f"–ê–Ω–∞–ª—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è {len(domains_data)} –¥–æ–º–µ–Ω—ñ–≤")
    
    # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –∑–º—ñ–Ω–∏ —Ç—Ä–∞—Ñ—ñ–∫—É
    has_critical_changes, drops_message, growth_message = analyze_traffic_changes(domains_data)
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è None (–¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏), –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∏—á–µ–≥–æ
    if drops_message is None and growth_message is None:
        logger.info("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç—å—Å—è —á–µ—Ä–µ–∑ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö.")
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–ø–∞–¥–µ–Ω–∏—è –∏–ª–∏ —Ä–æ—Å—Ç)
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ "–ö—Ä–∏—Ç–∏—á–Ω–∏—Ö –∑–º—ñ–Ω —Ç—Ä–∞—Ñ—ñ–∫—É –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ" –∏ –Ω–µ—Ç —Ä–æ—Å—Ç–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    if (not has_critical_changes and 
        drops_message and "–ö—Ä–∏—Ç–∏—á–Ω–∏—Ö –∑–º—ñ–Ω —Ç—Ä–∞—Ñ—ñ–∫—É –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ" in drops_message and 
        not growth_message):
        logger.info("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç—å—Å—è - –Ω–µ–º–∞—î –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∑–º—ñ–Ω —Ç—Ä–∞—Ñ—ñ–∫—É —Ç–∞ —Ä–æ—Å—Ç—É –¥–æ–º–µ–Ω—ñ–≤.")
        print("‚ÑπÔ∏è –ù–µ–º–∞—î –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∑–º—ñ–Ω —Ç—Ä–∞—Ñ—ñ–∫—É —Ç–∞ —Ä–æ—Å—Ç—É –¥–æ–º–µ–Ω—ñ–≤ - –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç—å—Å—è")
        return True
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    full_message = f"‚úÖ –†–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∑ Google Sheets –¥–ª—è {len(domains_data)} –¥–æ–º–µ–Ω—ñ–≤\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–∞–¥–µ–Ω–∏—è—Ö –µ—Å–ª–∏ –µ—Å—Ç—å
    if drops_message:
        full_message += drops_message + "\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–æ—Å—Ç–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if growth_message:
        full_message += growth_message
    
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {full_message}")
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ç–µ—Å—Ç–æ–≤–∏–π —á–∞—Ç
    print(f"üöÄ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ {'–∫—Ä–∏—Ç–∏—á–Ω—ñ –∑–º—ñ–Ω–∏' if has_critical_changes else '—Å—Ç–∞–Ω —Ç—Ä–∞—Ñ—ñ–∫—É'}...")
    result = send_message(full_message, parse_mode="HTML", test_mode=True)

if __name__ == "__main__":
    main() 