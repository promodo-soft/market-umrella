#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω–∏ —Ç—Ä–∞—Ñ—ñ–∫—É –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö
"""

from test_runner import analyze_traffic_changes
from telegram_bot import send_message
import logging
import json
import os
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def get_real_traffic_data():
    """–û—Ç—Ä–∏–º—É—î —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ —Ç—Ä–∞—Ñ—ñ–∫—É –∑ Google Sheets –±–µ–∑ –Ω–æ–≤–æ–≥–æ –∑–±–æ—Ä—É"""
    try:
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è
        credentials_json = os.getenv('GOOGLE_SHEETS_CREDENTIALS')
        if not credentials_json:
            logger.error("GOOGLE_SHEETS_CREDENTIALS –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return {}
            
        credentials_data = json.loads(credentials_json)
        credentials = Credentials.from_service_account_info(
            credentials_data,
            scopes=['https://www.googleapis.com/auth/spreadsheets']
        )
        
        # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ API
        service = build('sheets', 'v4', credentials=credentials)
        sheet = service.spreadsheets()
        
        # –ß–∏—Ç–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
        sheet_id = os.getenv('SHEET_ID')
        result = sheet.values().get(
            spreadsheetId=sheet_id,
            range='Traffic!A1:ZZ'
        ).execute()
        
        values = result.get('values', [])
        if not values:
            logger.info("–î–∞–Ω—ñ –≤ —Ç–∞–±–ª–∏—Ü—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ")
            return {}
            
        headers = values[0]
        domains_data = {}
        
        logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(values)-1} –¥–æ–º–µ–Ω—ñ–≤ —É —Ç–∞–±–ª–∏—Ü—ñ")
        logger.info(f"–°—Ç–æ–≤–ø—Ü—ñ –¥–∞—Ç: {headers[1:] if len(headers) > 1 else '–Ω–µ–º–∞—î'}")
        
        # –û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö - —Å—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è analyze_traffic_changes
        for row in values[1:]:
            if len(row) >= 2:
                domain = row[0]
                history = []
                
                # –ó–±–∏—Ä–∞—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é —Ç—Ä–∞—Ñ—ñ–∫—É (–≤—ñ–¥ –Ω–∞–π–Ω–æ–≤—ñ—à–æ–≥–æ –¥–æ –Ω–∞–π—Å—Ç–∞—Ä—ñ—à–æ–≥–æ)
                for i in range(1, len(row)):
                    if i < len(headers):
                        try:
                            traffic = int(row[i])
                            history.append({
                                'date': headers[i],
                                'traffic': traffic
                            })
                        except (ValueError, TypeError):
                            continue
                
                if history:
                    # –°–æ—Ä—Ç—É—î–º–æ –ø–æ –¥–∞—Ç—ñ (–Ω–∞–π–Ω–æ–≤—ñ—à–∏–π –ø–µ—Ä—à–∏–π)
                    history.sort(key=lambda x: x['date'], reverse=True)
                    domains_data[domain] = {
                        'traffic': history[0]['traffic'],
                        'history': history
                    }
        
        logger.info(f"–û–±—Ä–æ–±–ª–µ–Ω–æ –¥–∞–Ω—ñ –¥–ª—è {len(domains_data)} –¥–æ–º–µ–Ω—ñ–≤")
        return domains_data
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∑ Google Sheets: {e}")
        return {}

def send_real_traffic_update():
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Ä–µ–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω–∏ —Ç—Ä–∞—Ñ—ñ–∫—É"""
    
    print("=== –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–≤—ñ—Ç—É –ø—Ä–æ —Ç—Ä–∞—Ñ—ñ–∫ ===")
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∑ Google Sheets
        print("–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∑ Google Sheets...")
        domains_data = get_real_traffic_data()
        
        if not domains_data:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ Google Sheets")
            print("üí° –ú–æ–∂–ª–∏–≤–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ GOOGLE_SHEETS_CREDENTIALS –∞–±–æ SHEET_ID")
            return
            
        print(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ –¥–ª—è {len(domains_data)} –¥–æ–º–µ–Ω—ñ–≤")
        
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –∑–º—ñ–Ω–∏ —Ç—Ä–∞—Ñ—ñ–∫—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ä–µ–∞–ª—å–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
        print("–ê–Ω–∞–ª—ñ–∑—É—î–º–æ –∑–º—ñ–Ω–∏ —Ç—Ä–∞—Ñ—ñ–∫—É...")
        has_changes, drops_message, growth_message = analyze_traffic_changes(domains_data)
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è None (–¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏), –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∏—á–µ–≥–æ
        if drops_message is None and growth_message is None:
            logger.info("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç—å—Å—è —á–µ—Ä–µ–∑ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö.")
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–ø–∞–¥–µ–Ω–∏—è –∏–ª–∏ —Ä–æ—Å—Ç)
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ "–ö—Ä–∏—Ç–∏—á–Ω–∏—Ö –∑–º—ñ–Ω —Ç—Ä–∞—Ñ—ñ–∫—É –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ" –∏ –Ω–µ—Ç —Ä–æ—Å—Ç–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        if (not has_changes and 
            drops_message and "–ö—Ä–∏—Ç–∏—á–Ω–∏—Ö –∑–º—ñ–Ω —Ç—Ä–∞—Ñ—ñ–∫—É –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ" in drops_message and 
            not growth_message):
            logger.info("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç—å—Å—è - –Ω–µ–º–∞—î –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∑–º—ñ–Ω —Ç—Ä–∞—Ñ—ñ–∫—É —Ç–∞ —Ä–æ—Å—Ç—É –¥–æ–º–µ–Ω—ñ–≤.")
            print("‚ÑπÔ∏è –ù–µ–º–∞—î –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∑–º—ñ–Ω —Ç—Ä–∞—Ñ—ñ–∫—É —Ç–∞ —Ä–æ—Å—Ç—É –¥–æ–º–µ–Ω—ñ–≤ - –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç—å—Å—è")
            return True
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        full_message = f"‚úÖ –î–∞–Ω—ñ –ø—Ä–æ —Ç—Ä–∞—Ñ—ñ–∫ –∑ —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è {len(domains_data)} –¥–æ–º–µ–Ω—ñ–≤\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–∞–¥–µ–Ω–∏—è—Ö –µ—Å–ª–∏ –µ—Å—Ç—å
        if drops_message:
            full_message += drops_message + "\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–æ—Å—Ç–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if growth_message:
            full_message += growth_message
        
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {full_message}")
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram")
        if send_message(full_message, parse_mode="HTML", test_mode=True):
            if has_changes:
                print("‚ö†Ô∏è –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–≤—ñ—Ç –∑ –∫—Ä–∏—Ç–∏—á–Ω–∏–º–∏ –∑–º—ñ–Ω–∞–º–∏ —Ç—Ä–∞—Ñ—ñ–∫—É")
            else:
                print("‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–≤—ñ—Ç –±–µ–∑ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∑–º—ñ–Ω")
        else:
            print("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ")
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {e}")
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

if __name__ == "__main__":
    send_real_traffic_update() 