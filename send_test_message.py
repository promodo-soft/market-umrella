#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç—Ä–∞—Ñ–∏–∫–µ
"""

import sys
import os
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def send_message(message, parse_mode="HTML", test_mode=True):
    """–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        import requests
        
        # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
        bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not bot_token:
            logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        # ID —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —á–∞—Ç–∞
        test_chat_id = "-600437720"  # –¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç
        
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        
        data = {
            'chat_id': test_chat_id,
            'text': message,
            'parse_mode': parse_mode
        }
        
        response = requests.post(url, data=data, timeout=30)
        
        if response.status_code == 200:
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç {test_chat_id}")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        return False

def create_test_traffic_message():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç—Ä–∞—Ñ–∏–∫–µ"""
    
    current_date = datetime.now().strftime('%Y-%m-%d')
    
    # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞—Ñ–∏–∫–µ (—Å–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
    test_domains_data = {
        'example1.com': {
            'traffic': 15420,
            'history': [
                {'date': '2025-06-02', 'traffic': 14850},
                {'date': '2025-06-16', 'traffic': 15420}
            ]
        },
        'example2.com': {
            'traffic': 8930,
            'history': [
                {'date': '2025-06-02', 'traffic': 9200},
                {'date': '2025-06-16', 'traffic': 8930}
            ]
        },
        'example3.com': {
            'traffic': 25600,
            'history': [
                {'date': '2025-06-02', 'traffic': 24100},
                {'date': '2025-06-16', 'traffic': 25600}
            ]
        }
    }
    
    # –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    significant_changes = []
    small_changes = []
    no_changes = []
    
    for domain, data in test_domains_data.items():
        if len(data['history']) >= 2:
            current = data['history'][-1]['traffic']
            previous = data['history'][-2]['traffic']
            
            if previous > 0:
                change_percent = ((current - previous) / previous) * 100
                change_abs = current - previous
                
                if abs(change_percent) >= 10:  # –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    change_emoji = "üìà" if change_percent > 0 else "üìâ"
                    significant_changes.append(
                        f"{change_emoji} <b>{domain}</b>: {previous:,} ‚Üí {current:,} "
                        f"({change_abs:+,}, {change_percent:+.1f}%)"
                    )
                elif abs(change_percent) >= 5:  # –ù–µ–±–æ–ª—å—à–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    change_emoji = "‚ÜóÔ∏è" if change_percent > 0 else "‚ÜòÔ∏è"
                    small_changes.append(
                        f"{change_emoji} {domain}: {previous:,} ‚Üí {current:,} "
                        f"({change_abs:+,}, {change_percent:+.1f}%)"
                    )
                else:  # –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                    no_changes.append(f"üîπ {domain}: {current:,}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"üß™ <b>–¢–ï–°–¢–û–í–ï –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø</b>\n"
    message += f"üìä <b>–ó–≤—ñ—Ç –ø—Ä–æ —Ç—Ä–∞—Ñ—ñ–∫ –Ω–∞ {current_date}</b>\n\n"
    
    if significant_changes:
        message += "<b>üéØ –ó–Ω–∞—á–Ω—ñ –∑–º—ñ–Ω–∏ (‚â•10%):</b>\n"
        message += "\n".join(significant_changes) + "\n\n"
    
    if small_changes:
        message += "<b>üìà –ù–µ–≤–µ–ª–∏–∫—ñ –∑–º—ñ–Ω–∏ (5-10%):</b>\n"
        message += "\n".join(small_changes) + "\n\n"
    
    if no_changes:
        message += "<b>üîπ –ë–µ–∑ –∑–Ω–∞—á–Ω–∏—Ö –∑–º—ñ–Ω (<5%):</b>\n"
        message += "\n".join(no_changes[:5])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
        if len(no_changes) > 5:
            message += f"\n... —Ç–∞ —â–µ {len(no_changes) - 5} –¥–æ–º–µ–Ω—ñ–≤"
        message += "\n\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_domains = len(test_domains_data)
    total_traffic = sum(data['traffic'] for data in test_domains_data.values())
    
    message += f"üìã <b>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
    message += f"‚Ä¢ –í—Å—å–æ–≥–æ –¥–æ–º–µ–Ω—ñ–≤: {total_domains}\n"
    message += f"‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∏–π —Ç—Ä–∞—Ñ—ñ–∫: {total_traffic:,}\n"
    message += f"‚Ä¢ –ó–Ω–∞—á–Ω–∏—Ö –∑–º—ñ–Ω: {len(significant_changes)}\n"
    message += f"‚Ä¢ –ù–µ–≤–µ–ª–∏–∫–∏—Ö –∑–º—ñ–Ω: {len(small_changes)}\n"
    message += f"‚Ä¢ –ë–µ–∑ –∑–º—ñ–Ω: {len(no_changes)}\n\n"
    
    message += f"‚è∞ <i>–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {datetime.now().strftime('%H:%M:%S')}</i>\n"
    message += f"üß™ <i>–¶–µ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—Ä–∏–∫–ª–∞–¥–æ–º –¥–∞–Ω–∏—Ö</i>"
    
    return message

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=== –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç—Ä–∞—Ñ–∏–∫–µ ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not bot_token:
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
    
    print(f"‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω (–¥–ª–∏–Ω–∞: {len(bot_token)})")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = create_test_traffic_message()
    
    print("\n=== –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è ===")
    # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ HTML —Ç–µ–≥–æ–≤ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    import re
    preview = re.sub(r'<[^>]+>', '', message)
    print(preview)
    
    print("\n=== –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ===")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    result = send_message(message, parse_mode="HTML", test_mode=True)
    
    if result:
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    return result

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 