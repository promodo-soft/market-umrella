#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç,
–∏—Å–ø–æ–ª—å–∑—É—è —É–∂–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
"""
import os
import logging
import json
from datetime import datetime
from telegram_bot import send_message
from google.oauth2 import service_account
from googleapiclient.discovery import build
from config import MAIN_SHEET_ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def is_data_fresh(domains_data, max_days=7):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞—Ñ–∏–∫–µ.
    
    Args:
        domains_data (dict): –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç—Ä–∞—Ñ–∏–∫–µ –ø–æ –¥–æ–º–µ–Ω–∞–º
        max_days (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Å—á–∏—Ç–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ–∂–∏–º–∏
        
    Returns:
        tuple: (—Å–≤–µ–∂–∏–µ –ª–∏ –¥–∞–Ω–Ω—ã–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
    """
    if not domains_data:
        return False, 999
    
    # –ò—â–µ–º —Å–∞–º—É—é —Å–≤–µ–∂—É—é –¥–∞—Ç—É –≤ –¥–∞–Ω–Ω—ã—Ö
    latest_date = None
    for domain, data in domains_data.items():
        history = data.get('history', [])
        if history:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ –¥–∞—Ç–µ
            sorted_history = sorted(history, key=lambda x: x['date'])
            domain_latest = sorted_history[-1]['date']
            
            try:
                domain_date = datetime.strptime(domain_latest, '%Y-%m-%d')
                if latest_date is None or domain_date > latest_date:
                    latest_date = domain_date
            except ValueError:
                continue
    
    if latest_date is None:
        return False, 999
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –¥–Ω—è—Ö
    current_date = datetime.now()
    days_diff = (current_date - latest_date).days
    
    logger.info(f"–û—Å—Ç–∞–Ω–Ω—è –¥–∞—Ç–∞ –¥–∞–Ω–∏—Ö: {latest_date.strftime('%Y-%m-%d')}, –¥–Ω—ñ–≤ —Ç–æ–º—É: {days_diff}")
    
    return days_diff <= max_days, days_diff

def analyze_traffic_changes(domains_data):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram.
    
    Args:
        domains_data (dict): –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç—Ä–∞—Ñ–∏–∫–µ –ø–æ –¥–æ–º–µ–Ω–∞–º
        
    Returns:
        tuple: (–µ—Å—Ç—å –ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–∞–¥–µ–Ω–∏—è—Ö, —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–æ—Å—Ç–µ)
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–µ–∂–µ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    is_fresh, days_old = is_data_fresh(domains_data, max_days=7)
    
    if not is_fresh:
        logger.warning(f"–î–∞–Ω—ñ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ –Ω–∞ {days_old} –¥–Ω—ñ–≤. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∞–Ω–∞–ª—ñ–∑ –∑–º—ñ–Ω —Ç—Ä–∞—Ñ—ñ–∫—É. –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ù–ï –≤—ñ–¥–ø—Ä–∞–≤–ª—è—é—Ç—å—Å—è.")
        return False, None, None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –¥–ª—è –æ–±–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    
    critical_changes = []
    consecutive_drops = []
    triple_drops = []
    growth_domains = {}
    
    logger.info(f"–ê–Ω–∞–ª—ñ–∑—É—î–º–æ –∑–º—ñ–Ω–∏ —Ç—Ä–∞—Ñ—ñ–∫—É –¥–ª—è {len(domains_data)} –¥–æ–º–µ–Ω—ñ–≤ (–¥–∞–Ω—ñ —Å–≤—ñ–∂—ñ: {days_old} –¥–Ω—ñ–≤ —Ç–æ–º—É)")
    
    for domain, data in domains_data.items():
        history = data.get('history', [])
        if len(history) >= 2:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ –¥–∞—Ç–µ
            sorted_history = sorted(history, key=lambda x: x['date'])
            
            current_traffic = sorted_history[-1]['traffic']  # –ü–æ—Å–ª–µ–¥–Ω–∏–π (—Å–∞–º—ã–π –Ω–æ–≤—ã–π)
            previous_traffic = sorted_history[-3]['traffic'] if len(sorted_history) >= 3 else sorted_history[0]['traffic']  # –î–≤—É—Ö–Ω–µ–¥–µ–ª—å–Ω–æ–π –¥–∞–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–∞–¥–µ–Ω–∏–π
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            change_percent = ((current_traffic - previous_traffic) / previous_traffic) * 100 if previous_traffic > 0 else 0
            logger.info(f"–î–æ–º–µ–Ω {domain}: –ø–æ—Ç–æ—á–Ω–∏–π —Ç—Ä–∞—Ñ—ñ–∫ {current_traffic}, –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π {previous_traffic}, –∑–º—ñ–Ω–∞ {change_percent:.1f}%")
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–º–µ–Ω—ã —Å —Ç—Ä–∞—Ñ–∏–∫–æ–º –º–µ–Ω—å—à–µ 1000
            if current_traffic < 1000 or previous_traffic < 1000:
                logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥–æ–º–µ–Ω {domain} —á–µ—Ä–µ–∑ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ–π —Ç—Ä–∞—Ñ—ñ–∫")
                continue
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –¥–ª—è –ø–∞–¥–µ–Ω–∏–π
            change = ((current_traffic - previous_traffic) / previous_traffic) * 100
            
            # –§–ª–∞–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –Ω—É–∂–Ω–æ –ª–∏ —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ –ø–∞–¥–µ–Ω–∏–∏
            should_notify = False
            previous_change = None
            triple_change = None
            
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ —Ä–µ–∑–∫–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è –Ω–∞ 11%
            if change <= -11:
                logger.info(f"–í–∏—è–≤–ª–µ–Ω–æ —Ä—ñ–∑–∫–µ –ø–∞–¥—ñ–Ω–Ω—è –¥–ª—è {domain}: {change:.1f}%")
                critical_changes.append({
                    'domain': domain,
                    'traffic': current_traffic,
                    'change': change,
                    'type': 'sharp'
                })
                should_notify = True
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –¥–≤—É—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–¥–µ–Ω–∏–π –ø–æ 5%
            elif len(sorted_history) >= 3:
                traffic_before_previous = sorted_history[-3]['traffic']  # –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø—Ä–µ–¥—ã–¥—É—â–∏–º
                if traffic_before_previous >= 1000:
                    previous_change = ((previous_traffic - traffic_before_previous) / traffic_before_previous) * 100
                    if previous_change <= -5 and change <= -5:
                        logger.info(f"–í–∏—è–≤–ª–µ–Ω–æ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–µ –ø–∞–¥—ñ–Ω–Ω—è –¥–ª—è {domain}: –ø–æ—Ç–æ—á–Ω–µ {change:.1f}%, –ø–æ–ø–µ—Ä–µ–¥–Ω—î {previous_change:.1f}%")
                        consecutive_drops.append({
                            'domain': domain,
                            'traffic': current_traffic,
                            'change': change,
                            'prev_change': previous_change
                        })
                        should_notify = True
            
            # 3. –£—Å–ª–æ–≤–∏–µ: –ø–∞–¥–µ–Ω–∏–µ –±–æ–ª–µ–µ 3% –≤ —Ç—Ä–µ—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ—Ä–µ–Ω–∏—è—Ö –ø–æ–¥—Ä—è–¥
            if len(sorted_history) >= 4 and not should_notify:
                traffic_3ago = sorted_history[-4]['traffic']
                if traffic_3ago >= 1000 and previous_change is not None:
                    change_2 = ((traffic_before_previous - traffic_3ago) / traffic_3ago) * 100
                    if change_2 <= -3 and previous_change <= -3 and change <= -3:
                        logger.info(f"–í–∏—è–≤–ª–µ–Ω–æ –ø–æ—Ç—Ä—ñ–π–Ω–µ –ø–∞–¥—ñ–Ω–Ω—è –¥–ª—è {domain}: {change_2:.1f}%, {previous_change:.1f}%, {change:.1f}%")
                        triple_drops.append({
                            'domain': domain,
                            'traffic': current_traffic,
                            'change': change,
                            'prev_change': previous_change,
                            'triple_change': change_2
                        })
                        should_notify = True
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Ç–∞ (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ –ø–µ—Ä–∏–æ–¥—ã)
            if len(sorted_history) >= 2:
                recent_traffic = sorted_history[-2]['traffic']  # –ü—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–æ—Å—Ç–∞
                if recent_traffic >= 1000:
                    growth_percent = ((current_traffic - recent_traffic) / recent_traffic) * 100
                    if growth_percent >= 15.0:
                        growth_domains[domain] = {
                            'current_traffic': current_traffic,
                            'previous_traffic': recent_traffic,
                            'growth_percent': growth_percent,
                            'current_date': sorted_history[-1]['date'],
                            'previous_date': sorted_history[-2]['date']
                        }
                        logger.info(f"–í–∏—è–≤–ª–µ–Ω–æ —Ä—ñ—Å—Ç –¥–ª—è {domain}: {growth_percent:.1f}%")
    
    # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    current_date = datetime.now().strftime("%d.%m.%Y")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–∞–¥–µ–Ω–∏—è—Ö
    if not critical_changes and not consecutive_drops and not triple_drops:
        drops_message = f"‚úÖ –ö—Ä–∏—Ç–∏—á–Ω–∏—Ö –∑–º—ñ–Ω —Ç—Ä–∞—Ñ—ñ–∫—É –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ\n\nüìÜ –î–∞–Ω—ñ –ø–æ—Ä—ñ–≤–Ω—é—é—Ç—å—Å—è –∑ –ø–æ–∫–∞–∑–Ω–∏–∫–∞–º–∏ –¥–≤–æ—Ç–∏–∂–Ω–µ–≤–æ—ó –¥–∞–≤–Ω–∏–Ω–∏\nüìÖ –î–∞—Ç–∞ –∑–≤—ñ—Ç—É: {current_date}"
    else:
        drops_message = "‚ö†Ô∏è –í–∏—è–≤–ª–µ–Ω–æ –ø–∞–¥—ñ–Ω–Ω—è —Ç—Ä–∞—Ñ—ñ–∫—É:\n\n"
        
        # –°–Ω–∞—á–∞–ª–∞ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑–∫–∏–µ –ø–∞–¥–µ–Ω–∏—è
        if critical_changes:
            drops_message += "üìâ –†—ñ–∑–∫–µ –ø–∞–¥—ñ–Ω–Ω—è:\n"
            for change in sorted(critical_changes, key=lambda x: x['change']):
                drops_message += f"‚Ä¢ <b>{change['domain']}</b>: {change['traffic']:,} (–ø–∞–¥—ñ–Ω–Ω—è {abs(change['change']):.1f}% –ø–æ—Ä—ñ–≤–Ω—è–Ω–æ –∑ –¥–≤–æ—Ç–∏–∂–Ω–µ–≤–æ—é –¥–∞–≤–Ω–∏–Ω–æ—é)\n"
            drops_message += "\n"
        
        # –ó–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞–¥–µ–Ω–∏—è
        if consecutive_drops:
            drops_message += "üìâ –ü–æ—Å–ª—ñ–¥–æ–≤–Ω–µ –ø–∞–¥—ñ–Ω–Ω—è:\n"
            for drop in sorted(consecutive_drops, key=lambda x: x['change']):
                drops_message += f"‚Ä¢ <b>{drop['domain']}</b>: {drop['traffic']:,} (–ø–∞–¥—ñ–Ω–Ω—è {abs(drop['change']):.1f}% –ø–æ—Ä—ñ–≤–Ω—è–Ω–æ –∑ –¥–≤–æ—Ç–∏–∂–Ω–µ–≤–æ—é –¥–∞–≤–Ω–∏–Ω–æ—é, –ø–æ–ø–µ—Ä. –ø–∞–¥—ñ–Ω–Ω—è {abs(drop['prev_change']):.1f}%)\n"
            drops_message += "\n"
        
        # –¢—Ä–æ–π–Ω—ã–µ –ø–∞–¥–µ–Ω–∏—è
        if triple_drops:
            drops_message += "üìâ –ü–æ—Ç—Ä—ñ–π–Ω–µ –ø–∞–¥—ñ–Ω–Ω—è:\n"
            for drop in sorted(triple_drops, key=lambda x: x['change']):
                drops_message += f"‚Ä¢ <b>{drop['domain']}</b>: {drop['traffic']:,} (—Ç—Ä–∏ –ø–æ—Å–ø—ñ–ª—å –ø–∞–¥—ñ–Ω–Ω—è: {abs(drop['triple_change']):.1f}%, {abs(drop['prev_change']):.1f}%, {abs(drop['change']):.1f}%)\n"
            drops_message += "\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ –∏ –¥–∞—Ç—É
        drops_message += f"üìå –í—Å—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –ø–æ—Ä—ñ–≤–Ω—é—é—Ç—å—Å—è –∑ –¥–∞–Ω–∏–º–∏ –¥–≤–æ—Ç–∏–∂–Ω–µ–≤–æ—ó –¥–∞–≤–Ω–∏–Ω–∏\nüìÖ –î–∞—Ç–∞ –∑–≤—ñ—Ç—É: {current_date}"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–æ—Å—Ç–µ
    growth_message = None
    if growth_domains:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É —Ä–æ—Å—Ç–∞ (—É–±—ã–≤–∞–Ω–∏–µ)
        sorted_domains = sorted(
            growth_domains.items(), 
            key=lambda x: x[1]['growth_percent'], 
            reverse=True
        )
        
        message_parts = ["üöÄ –î–æ–º–µ–Ω–∏ –∑ —Ä–æ—Å—Ç–æ–º —Ç—Ä–∞—Ñ—ñ–∫—É 15%+:\n"]
        
        for domain, data in sorted_domains:
            current = data['current_traffic']
            previous = data['previous_traffic']
            growth = data['growth_percent']
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
            current_formatted = f"{current:,}".replace(',', ' ')
            previous_formatted = f"{previous:,}".replace(',', ' ')
            
            message_parts.append(
                f"üìà <b>{domain}</b>: {current_formatted} (–±—É–ª–æ {previous_formatted}, +{growth:.1f}%)"
            )
        
        message_parts.append(f"\nüìä –í—Å—å–æ–≥–æ –¥–æ–º–µ–Ω—ñ–≤ –∑ —Ä–æ—Å—Ç–æ–º 15%+: {len(growth_domains)}")
        message_parts.append(f"üìå –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è–º")
        message_parts.append(f"üìÖ –î–∞—Ç–∞ –∑–≤—ñ—Ç—É: {current_date}")
        
        growth_message = "\n".join(message_parts)
    
    has_critical_changes = bool(critical_changes or consecutive_drops or triple_drops)
    
    return has_critical_changes, drops_message, growth_message

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    logger.info("=== –ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç—Ä–∞—Ñ–∏–∫–µ ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    if not os.getenv('TELEGRAM_BOT_TOKEN'):
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
        
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Google Sheets - –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    sheet_id = MAIN_SHEET_ID
    logger.info(f"Sheet ID: {sheet_id}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Google Sheets API
    try:
        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        creds_json = os.getenv('GOOGLE_SHEETS_CREDENTIALS')
        if not creds_json:
            logger.error("GOOGLE_SHEETS_CREDENTIALS –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets, 
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–º–µ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö
            logger.info("–§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–º–µ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
            domains_data = {
                "example.com": {
                    "traffic": 15000,
                    "history": [
                        {"date": "2025-04-07", "traffic": 15000},
                        {"date": "2025-04-01", "traffic": 18000}
                    ]
                },
                "sample-site.org": {
                    "traffic": 8500,
                    "history": [
                        {"date": "2025-04-07", "traffic": 8500},
                        {"date": "2025-04-01", "traffic": 10000}
                    ]
                },
                "test-domain.net": {
                    "traffic": 25000,
                    "history": [
                        {"date": "2025-04-07", "traffic": 25000},
                        {"date": "2025-04-01", "traffic": 30000},
                        {"date": "2025-03-25", "traffic": 32000}
                    ]
                }
            }
            
            has_changes, traffic_message, growth_message = analyze_traffic_changes(domains_data)
            
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è None (–¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏), –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∏—á–µ–≥–æ
            if traffic_message is None and growth_message is None:
                logger.info("–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç—å—Å—è —á–µ—Ä–µ–∑ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö.")
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–ø–∞–¥–µ–Ω–∏—è –∏–ª–∏ —Ä–æ—Å—Ç)
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ "–ö—Ä–∏—Ç–∏—á–Ω–∏—Ö –∑–º—ñ–Ω —Ç—Ä–∞—Ñ—ñ–∫—É –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ" –∏ –Ω–µ—Ç —Ä–æ—Å—Ç–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            if (not has_changes and 
                traffic_message and "–ö—Ä–∏—Ç–∏—á–Ω–∏—Ö –∑–º—ñ–Ω —Ç—Ä–∞—Ñ—ñ–∫—É –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ" in traffic_message and 
                not growth_message):
                logger.info("–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç—å—Å—è - –Ω–µ–º–∞—î –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∑–º—ñ–Ω —Ç—Ä–∞—Ñ—ñ–∫—É —Ç–∞ —Ä–æ—Å—Ç—É –¥–æ–º–µ–Ω—ñ–≤.")
                return True
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            test_message = f"‚úÖ –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –ø—Ä–æ —Ç—Ä–∞—Ñ—ñ–∫ –¥–ª—è {len(domains_data)} –¥–æ–º–µ–Ω—ñ–≤\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–∞–¥–µ–Ω–∏—è—Ö –µ—Å–ª–∏ –µ—Å—Ç—å
            if traffic_message:
                test_message += traffic_message + "\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–æ—Å—Ç–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            if growth_message:
                test_message += growth_message + "\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –æ —Ç–µ—Å—Ç–æ–≤–æ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–µ –¥–∞–Ω–Ω—ã—Ö
            test_message += "\n\n<i>–ü—Ä–∏–º—ñ—Ç–∫–∞: –¶–µ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–µ—Å—Ç–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏, –æ—Å–∫—ñ–ª—å–∫–∏ –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∑ Google Sheets.</i>"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram (test_mode=True —Ç–æ–ª—å–∫–æ –≤ —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç)
            logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç—Ä–∞—Ñ–∏–∫–µ")
            if send_message(test_message, parse_mode="HTML", test_mode=True):
                logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç—Ä–∞—Ñ–∏–∫–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return True
            else:
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç—Ä–∞—Ñ–∏–∫–µ")
                return False
        
        creds_dict = json.loads(creds_json)
        logger.info("–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        
        creds = service_account.Credentials.from_service_account_info(
            creds_dict,
            scopes=['https://www.googleapis.com/auth/spreadsheets']
        )
        logger.info("–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ Google Sheets
        service = build('sheets', 'v4', credentials=creds)
        sheet = service.spreadsheets()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        result = sheet.values().get(
            spreadsheetId=sheet_id,
            range='Traffic!A1:ZZ'  # –ü–æ–ª—É—á–∞–µ–º –≤—Å—é —Ç–∞–±–ª–∏—Ü—É
        ).execute()
        
        values = result.get('values', [])
        if not values:
            logger.error("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö
            error_message = "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ —Ç—Ä–∞—Ñ—ñ–∫ –∑ Google Sheets. –¢–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è."
            if send_message(error_message, test_mode=False):
                logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return True
            else:
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ")
                return False
        
        # –ß–∏—Ç–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫) –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∞–ª—å–Ω–∏—Ö –¥–∞—Ç
        headers = values[0] if values else []
        date_columns = []
        
        # –ó–±–∏—Ä–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–ª–æ–Ω–∫–∏ –∑ –¥–∞—Ç–∞–º–∏ (–ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä—à–∏–π —Å—Ç–æ–≤–ø–µ—Ü—å "Domain")
        for col_index in range(1, len(headers)):
            date_str = headers[col_index]
            if date_str:  # –Ø–∫—â–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –ø—É—Å—Ç–∏–π
                try:
                    # –ü—Ä–æ–±—É—î–º–æ —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –¥–∞—Ç—É
                    from datetime import datetime
                    date_obj = datetime.strptime(date_str, '%Y-%m-%d')
                    date_columns.append({
                        'index': col_index,
                        'date': date_str,
                        'date_obj': date_obj
                    })
                except ValueError:
                    # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ —è–∫ –¥–∞—Ç—É, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
                    continue
        
        # –°–æ—Ä—Ç—É—î–º–æ –∫–æ–ª–æ–Ω–∫–∏ –∑–∞ –¥–∞—Ç–æ—é (–≤—ñ–¥ —Å—Ç–∞—Ä–∏—Ö –¥–æ –Ω–æ–≤–∏—Ö –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É)
        date_columns.sort(key=lambda x: x['date_obj'])
        
        domains_data = {}
        
        for row_index, row in enumerate(values):
            if row_index == 0:  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
                continue
                
            if not row:  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ —Ä—è–¥–∫–∏
                continue
                
            domain = row[0] if len(row) > 0 else None
            if not domain:
                continue
            
            # –ó–±–∏—Ä–∞—î–º–æ –¥–∞–Ω–Ω—ñ —Ç—Ä–∞—Ñ—ñ–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö –¥–∞—Ç
            history = []
            for date_col in date_columns:
                col_index = date_col['index']
                if col_index < len(row) and row[col_index]:
                    try:
                        traffic_val = int(row[col_index])
                        if traffic_val >= 0:  # –î–æ–ø—É—Å–∫–∞—î–º–æ –Ω—É–ª–µ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
                            history.append({
                                'date': date_col['date'],
                                'traffic': traffic_val
                            })
                    except (ValueError, TypeError):
                        continue
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –¥–æ–º–µ–Ω–∏ –∑ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ –¥–≤–æ–º–∞ —Ç–æ—á–∫–∞–º–∏ –¥–∞–Ω–∏—Ö
            if len(history) >= 2:
                domains_data[domain] = {
                    'traffic': history[-1]['traffic'],  # –¢–µ–∫—É—â–∏–π —Ç—Ä–∞—Ñ–∏–∫ - –ø–æ—Å–ª–µ–¥–Ω–∏–π (—Å–∞–º—ã–π –Ω–æ–≤—ã–π)
                    'history': history
                }
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(domains_data)} –¥–æ–º–µ–Ω–æ–≤")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞
        has_changes, traffic_message, growth_message = analyze_traffic_changes(domains_data)
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è None (–¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏), –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∏—á–µ–≥–æ
        if traffic_message is None and growth_message is None:
            logger.info("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç—å—Å—è —á–µ—Ä–µ–∑ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö.")
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–ø–∞–¥–µ–Ω–∏—è –∏–ª–∏ —Ä–æ—Å—Ç)
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ "–ö—Ä–∏—Ç–∏—á–Ω–∏—Ö –∑–º—ñ–Ω —Ç—Ä–∞—Ñ—ñ–∫—É –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ" –∏ –Ω–µ—Ç —Ä–æ—Å—Ç–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        if (not has_changes and 
            traffic_message and "–ö—Ä–∏—Ç–∏—á–Ω–∏—Ö –∑–º—ñ–Ω —Ç—Ä–∞—Ñ—ñ–∫—É –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ" in traffic_message and 
            not growth_message):
            logger.info("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç—å—Å—è - –Ω–µ–º–∞—î –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∑–º—ñ–Ω —Ç—Ä–∞—Ñ—ñ–∫—É —Ç–∞ —Ä–æ—Å—Ç—É –¥–æ–º–µ–Ω—ñ–≤.")
            return True
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        full_message = f"‚úÖ –î–∞–Ω—ñ –ø—Ä–æ —Ç—Ä–∞—Ñ—ñ–∫ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {len(domains_data)} –¥–æ–º–µ–Ω—ñ–≤\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–∞–¥–µ–Ω–∏—è—Ö –µ—Å–ª–∏ –µ—Å—Ç—å
        if traffic_message:
            full_message += traffic_message + "\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–æ—Å—Ç–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if growth_message:
            full_message += growth_message
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ Telegram
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç—Ä–∞—Ñ–∏–∫–µ –≤–æ –≤—Å–µ —á–∞—Ç—ã, –≤–∫–ª—é—á–∞—è —Ä–∞–±–æ—á–∏–π")
        if send_message(full_message, parse_mode="HTML", test_mode=False):
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç—Ä–∞—Ñ–∏–∫–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return True
        else:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç—Ä–∞—Ñ–∏–∫–µ")
            return False
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        import traceback
        error_details = traceback.format_exc()
        logger.error(error_details)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_message = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ç—Ä–∞—Ñ—ñ–∫: {str(e)}"
        if send_message(error_message, test_mode=False):
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        
        return False

if __name__ == "__main__":
    success = main()
    if not success:
        logger.error("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
        exit(1)
    else:
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ") 