#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ü–æ–∫–∞–∑ –ø–æ–ª–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω–∏ —Ç—Ä–∞—Ñ—ñ–∫—É
"""

from test_runner import analyze_traffic_changes
from telegram_bot import send_message
from config import MAIN_SHEET_ID
import logging
import os
import json
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.WARNING)  # –£–º–µ–Ω—å—à–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger(__name__)

def get_real_traffic_data_from_sheets():
    """–û—Ç—Ä–∏–º—É—î —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ —Ç—Ä–∞—Ñ—ñ–∫—É –∑ Google Sheets"""
    try:
        # ID —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        SPREADSHEET_ID = MAIN_SHEET_ID
        
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è
        credentials_json = os.getenv('GOOGLE_SHEETS_CREDENTIALS')
        if not credentials_json:
            logger.error("GOOGLE_SHEETS_CREDENTIALS –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return {}
        
        credentials_dict = json.loads(credentials_json)
        credentials = Credentials.from_service_account_info(
            credentials_dict,
            scopes=['https://www.googleapis.com/auth/spreadsheets']
        )
        
        service = build('sheets', 'v4', credentials=credentials)
        
        # –ß–∏—Ç–∞—î–º–æ –¥–∞–Ω—ñ –∑ —Ç–∞–±–ª–∏—Ü—ñ
        range_name = 'A:Z'  # –ß–∏—Ç–∞—î–º–æ –≤—Å—ñ —Å—Ç–æ–≤–ø—Ü—ñ
        result = service.spreadsheets().values().get(
            spreadsheetId=SPREADSHEET_ID,
            range=range_name
        ).execute()
        
        values = result.get('values', [])
        if not values:
            logger.error("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –≤ Google Sheets")
            return {}
        
        # –ß–∏—Ç–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫) –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∞–ª—å–Ω–∏—Ö –¥–∞—Ç
        headers = values[0] if values else []
        date_columns = []
        
        # –ó–±–∏—Ä–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–ª–æ–Ω–∫–∏ –∑ –¥–∞—Ç–∞–º–∏ (–ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä—à–∏–π —Å—Ç–æ–≤–ø–µ—Ü—å "Domain")
        for col_index in range(1, len(headers)):
            date_str = headers[col_index]
            if date_str:  # –Ø–∫—â–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –ø—É—Å—Ç–∏–π
                try:
                    # –ü—Ä–æ–±—É—î–º–æ —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –¥–∞—Ç—É
                    from datetime import datetime
                    date_obj = datetime.strptime(date_str, '%Y-%m-%d')
                    date_columns.append({
                        'index': col_index,
                        'date': date_str,
                        'date_obj': date_obj
                    })
                except ValueError:
                    # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ —è–∫ –¥–∞—Ç—É, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
                    continue
        
        # –°–æ—Ä—Ç—É—î–º–æ –∫–æ–ª–æ–Ω–∫–∏ –∑–∞ –¥–∞—Ç–æ—é (–≤—ñ–¥ —Å—Ç–∞—Ä–∏—Ö –¥–æ –Ω–æ–≤–∏—Ö –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É)
        date_columns.sort(key=lambda x: x['date_obj'])
        
        domains_data = {}
        
        for row_index, row in enumerate(values):
            if row_index == 0:  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
                continue
                
            if not row:  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ —Ä—è–¥–∫–∏
                continue
                
            domain = row[0] if len(row) > 0 else None
            if not domain:
                continue
            
            # –ó–±–∏—Ä–∞—î–º–æ –¥–∞–Ω–Ω—ñ —Ç—Ä–∞—Ñ—ñ–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö –¥–∞—Ç
            history = []
            for date_col in date_columns:
                col_index = date_col['index']
                if col_index < len(row) and row[col_index]:
                    try:
                        traffic_val = int(row[col_index])
                        if traffic_val >= 0:  # –î–æ–ø—É—Å–∫–∞—î–º–æ –Ω—É–ª–µ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
                            history.append({
                                'date': date_col['date'],
                                'traffic': traffic_val
                            })
                    except (ValueError, TypeError):
                        continue
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –¥–æ–º–µ–Ω–∏ –∑ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ –¥–≤–æ–º–∞ —Ç–æ—á–∫–∞–º–∏ –¥–∞–Ω–∏—Ö
            if len(history) >= 2:
                domains_data[domain] = {
                    'history': history
                }
        
        return domains_data
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ Google Sheets: {e}")
        return {}

def show_full_traffic_message():
    """–ü–æ–∫–∞–∑—É—î –ø–æ–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω–∏ —Ç—Ä–∞—Ñ—ñ–∫—É"""
    
    print("=== –ü–æ–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω–∏ —Ç—Ä–∞—Ñ—ñ–∫—É ===\n")
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ Google Sheets
        domains_data = get_real_traffic_data_from_sheets()
        
        if not domains_data:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ Google Sheets")
            return
            
        print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ {len(domains_data)} –¥–æ–º–µ–Ω—ñ–≤\n")
        
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –∑–º—ñ–Ω–∏ —Ç—Ä–∞—Ñ—ñ–∫—É
        has_changes, drops_message, growth_message = analyze_traffic_changes(domains_data)
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è None (–¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–æ
        if drops_message is None and growth_message is None:
            print("‚ö†Ô∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –≥–µ–Ω–µ—Ä—É—î—Ç—å—Å—è —á–µ—Ä–µ–∑ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–ø–∞–¥–µ–Ω–∏—è –∏–ª–∏ —Ä–æ—Å—Ç)
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ "–ö—Ä–∏—Ç–∏—á–Ω–∏—Ö –∑–º—ñ–Ω —Ç—Ä–∞—Ñ—ñ–∫—É –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ" –∏ –Ω–µ—Ç —Ä–æ—Å—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        if (not has_changes and 
            drops_message and "–ö—Ä–∏—Ç–∏—á–Ω–∏—Ö –∑–º—ñ–Ω —Ç—Ä–∞—Ñ—ñ–∫—É –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ" in drops_message and 
            not growth_message):
            print("‚ÑπÔ∏è –ù–µ–º–∞—î –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∑–º—ñ–Ω —Ç—Ä–∞—Ñ—ñ–∫—É —Ç–∞ —Ä–æ—Å—Ç—É –¥–æ–º–µ–Ω—ñ–≤")
            print("üìã –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø –ù–ï –ë–£–î–ï –í–Ü–î–ü–†–ê–í–õ–ï–ù–ï –í –ü–†–û–î–ê–ö–®–ù –ß–ê–¢–ê–•")
            print("="*80)
            print(drops_message)
            return
        
        print("="*80)
        print("üìã –ü–û–í–ù–ï –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø –ü–†–û –¢–†–ê–§–Ü–ö:")
        print("="*80)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        print(f"‚úÖ –î–∞–Ω—ñ –ø—Ä–æ —Ç—Ä–∞—Ñ—ñ–∫ –¥–ª—è {len(domains_data)} –¥–æ–º–µ–Ω—ñ–≤\n")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–∞–¥–µ–Ω–∏—è—Ö –µ—Å–ª–∏ –µ—Å—Ç—å
        if drops_message:
            print("üìâ –ü–ê–î–Ü–ù–ù–Ø –¢–†–ê–§–Ü–ö–£:")
            print(drops_message)
            print("\n" + "="*80 + "\n")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–æ—Å—Ç–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if growth_message:
            print("üìà –†–Ü–°–¢ –¢–†–ê–§–Ü–ö–£:")
            print(growth_message)
            print("\n" + "="*80 + "\n")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å–∏–º–≤–æ–ª–æ–≤
        full_message = f"‚úÖ –î–∞–Ω—ñ –ø—Ä–æ —Ç—Ä–∞—Ñ—ñ–∫ –¥–ª—è {len(domains_data)} –¥–æ–º–µ–Ω—ñ–≤\n\n"
        if drops_message:
            full_message += drops_message + "\n\n"
        if growth_message:
            full_message += growth_message
        
        print(f"üìä –î–æ–≤–∂–∏–Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {len(full_message)} —Å–∏–º–≤–æ–ª—ñ–≤")
        print(f"üîÑ –ë—É–¥–µ —Ä–æ–∑–±–∏—Ç–æ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏: {'–¢–ê–ö' if len(full_message) > 4000 else '–ù–Ü'}")
        print("="*80)
        
        # –ü–æ–¥—Å—á–∏—Ç–∞–µ–º —Å–µ–∫—Ü–∏–∏
        sharp_count = full_message.count('–ø–∞–¥—ñ–Ω–Ω—è') - full_message.count('–ü–æ—Å–ª—ñ–¥–æ–≤–Ω–µ –ø–∞–¥—ñ–Ω–Ω—è') - full_message.count('–ø–∞–¥—ñ–Ω–Ω—è —Ç—Ä–∞—Ñ—ñ–∫—É')
        sequential_in_message = '–ü–æ—Å–ª—ñ–¥–æ–≤–Ω–µ –ø–∞–¥—ñ–Ω–Ω—è' in full_message
        
        print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:")
        print(f"   - –ú—ñ—Å—Ç–∏—Ç—å —Å–µ–∫—Ü—ñ—é '–†—ñ–∑–∫–µ –ø–∞–¥—ñ–Ω–Ω—è': {'–¢–ê–ö' if '–†—ñ–∑–∫–µ –ø–∞–¥—ñ–Ω–Ω—è' in full_message else '–ù–Ü'}")
        print(f"   - –ú—ñ—Å—Ç–∏—Ç—å —Å–µ–∫—Ü—ñ—é '–ü–æ—Å–ª—ñ–¥–æ–≤–Ω–µ –ø–∞–¥—ñ–Ω–Ω—è': {'–¢–ê–ö' if sequential_in_message else '–ù–Ü'}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç
        print(f"\nüöÄ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ç–µ—Å—Ç–æ–≤–∏–π —á–∞—Ç...")
        print(f"üìè –î–æ–≤–∂–∏–Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: {len(full_message)} —Å–∏–º–≤–æ–ª—ñ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
        import os
        bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not bot_token:
            print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
            return
        else:
            print(f"‚úÖ TELEGRAM_BOT_TOKEN –∑–Ω–∞–π–¥–µ–Ω–∏–π (–¥–æ–≤–∂–∏–Ω–∞: {len(bot_token)})")
        
        try:
            result = send_message(full_message, parse_mode="HTML", test_mode=True)
            
            if result:
                print("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ—Å—Ç–æ–≤–∏–π —á–∞—Ç!")
            else:
                print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        except Exception as e:
            print(f"‚ùå –í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
            import traceback
            print(f"–î–µ—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {traceback.format_exc()}")
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

if __name__ == "__main__":
    show_full_traffic_message() 