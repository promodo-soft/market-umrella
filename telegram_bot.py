import logging
from telegram import Update, ParseMode
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from config import TELEGRAM_BOT_TOKEN
from typing import Dict, Any, List, Union
import json
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("telegram_bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id
CHAT_ID_FILE = 'chat_id.json'
CHATS_FILE = 'telegram_chats.json'

# ID —á–∞—Ç–æ–≤, –∫—É–¥–∞ –Ω–µ —Å–ª–µ–¥—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
PRODUCTION_CHAT_IDS = ["-1001930136015", "-387031049", "-1001177341323"]  # –¢—Ä–∏ —Ä–æ–±–æ—á–∏—Ö —á–∞—Ç–∏: SEO & CSD, Promodo Sales & SEO —Ç–∞ Promodo SEO
# –¢–µ—Å—Ç–æ–≤–∏–π —á–∞—Ç "–ö—Ä—è_Team - Dream Teamü§ó" –∑ ID -600437720 –±—É–¥–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
chat_id = None
chat_ids = []
updater_instance = None

def get_updater():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä updater."""
    global updater_instance
    if updater_instance is None:
        updater_instance = Updater(TELEGRAM_BOT_TOKEN)
    return updater_instance

def load_chat_id():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç chat_id –∏–∑ —Ñ–∞–π–ª–∞."""
    global chat_id, chat_ids
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π chat_id
        if os.path.exists(CHAT_ID_FILE):
            with open(CHAT_ID_FILE, 'r') as f:
                data = json.load(f)
                chat_id = data.get('chat_id')
                if chat_id:
                    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω –æ—Å–Ω–æ–≤–Ω–∏–π chat_id: {chat_id}")
                    
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —á–∞—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞
        if os.path.exists(CHATS_FILE):
            with open(CHATS_FILE, 'r') as f:
                chats_data = json.load(f)
                chat_ids = []
                
                for cid_str, name in chats_data.items():
                    try:
                        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ ID –≥—Ä—É–ø–ø
                        cid = int(cid_str)
                        chat_ids.append(cid)
                        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω chat_id: {cid} ({name})")
                    except ValueError:
                        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∏–π chat_id –≤ —Ñ–∞–π–ª—ñ: {cid_str}")
                
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(chat_ids)} —á–∞—Ç—ñ–≤")
            
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        chat_ids = list(set(chat_ids))
        
        logger.info(f"–í—Å—å–æ–≥–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —á–∞—Ç—ñ–≤: {len(chat_ids)}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑—Ü—ñ chat_id: {str(e)}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")

def save_chat_id():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç chat_id –≤ —Ñ–∞–π–ª."""
    try:
        with open(CHAT_ID_FILE, 'w') as f:
            json.dump({'chat_id': chat_id}, f)
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω chat_id: {chat_id}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π chat_id –≤ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤
        if os.path.exists(CHATS_FILE):
            with open(CHATS_FILE, 'r') as f:
                chats_data = json.load(f)
        else:
            chats_data = {}
            
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —á–∞—Ç –∑ –Ω–∞–∑–≤–∞–Ω–Ω—è–º '–ù–æ–≤–∏–π —á–∞—Ç'
        chats_data[str(chat_id)] = "–ù–æ–≤–∏–π —á–∞—Ç"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
        with open(CHATS_FILE, 'w') as f:
            json.dump(chats_data, f, indent=2)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ chat_id: {str(e)}")

def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    global chat_id
    chat_id = update.effective_chat.id
    chat_type = update.effective_chat.type
    
    user = update.effective_user
    
    # –†–∞–∑–Ω—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏ –≥—Ä—É–ø–ø
    if chat_type == 'private':
        greeting = f'–ü—Ä–∏–≤—ñ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –æ—Ä–≥–∞–Ω—ñ—á–Ω–æ–≥–æ —Ç—Ä–∞—Ñ—ñ–∫—É —Å–∞–π—Ç—ñ–≤ —á–µ—Ä–µ–∑ Ahrefs API. '
        greeting += f'–Ø –±—É–¥—É –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ç–∞ –∑–Ω–∏–∂–µ–Ω–Ω—è —Ç—Ä–∞—Ñ—ñ–∫—É –≤ —Ü–µ–π —á–∞—Ç.'
    else:
        chat_name = update.effective_chat.title
        greeting = f'–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –æ—Ä–≥–∞–Ω—ñ—á–Ω–æ–≥–æ —Ç—Ä–∞—Ñ—ñ–∫—É —Å–∞–π—Ç—ñ–≤ —á–µ—Ä–µ–∑ Ahrefs API. '
        greeting += f'–Ø –±—É–¥—É –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ç–∞ –∑–Ω–∏–∂–µ–Ω–Ω—è —Ç—Ä–∞—Ñ—ñ–∫—É –≤ —Ü–µ–π —á–∞—Ç "{chat_name}".'
    
    update.message.reply_text(greeting)
    
    logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —á–∞—Ç—ñ {chat_id} (—Ç–∏–ø: {chat_type}). –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (ID: {user.id})")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id
    save_chat_id()
    # –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
    load_chat_id()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    try:
        test_message = "‚úÖ –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –≤ —Ü—å–æ–º—É —á–∞—Ç—ñ. –¢–µ–ø–µ—Ä –≤–∏ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω–∏ —Ç—Ä–∞—Ñ—ñ–∫—É."
        get_updater().bot.send_message(chat_id=chat_id, text=test_message)
        logger.info(f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {str(e)}")

def help_command(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    update.message.reply_text(
        '–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n'
        '/start - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞\n'
        '/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É\n'
        '/status - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n'
    )

def status(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status."""
    load_chat_id()
    
    response = '–ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π —ñ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏.\n\n'
    response += f'–û—Å–Ω–æ–≤–Ω–∏–π —á–∞—Ç ID: {chat_id}\n'
    response += f'–í—Å—å–æ–≥–æ —á–∞—Ç—ñ–≤ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: {len(chat_ids)}\n'
    response += f'ID —á–∞—Ç—ñ–≤: {", ".join([str(cid) for cid in chat_ids])}'
    
    update.message.reply_text(response)

def format_traffic_message(domain: str, traffic: int, previous_traffic: int = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç—Ä–∞—Ñ–∏–∫–µ –¥–ª—è –¥–æ–º–µ–Ω–∞.
    
    Args:
        domain (str): –î–æ–º–µ–Ω
        traffic (int): –¢–µ–∫—É—â–∏–π —Ç—Ä–∞—Ñ–∏–∫
        previous_traffic (int, optional): –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    message = f"üåê *{domain}*\n"
    message += f"üìä –¢—Ä–∞—Ñ—ñ–∫: {traffic:,}\n"
    
    if previous_traffic is not None and previous_traffic > 0:
        change = ((traffic - previous_traffic) / previous_traffic) * 100
        emoji = "üìà" if change >= 0 else "üìâ"
        message += f"{emoji} –ó–º—ñ–Ω–∞: {change:+.1f}%\n"
        
    return message

def notify_traffic_update(domains_data, mode='production'):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞—Ñ–∏–∫–µ.
    –£—Å–ª–æ–≤–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏:
    1. –ü–∞–¥–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞ –±–æ–ª–µ–µ 5% –≤ –¥–≤—É—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ—Ä–µ–Ω–∏—è—Ö –ø–æ–¥—Ä—è–¥
    2. –ü–∞–¥–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞ –±–æ–ª–µ–µ 11% –ø—Ä–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å—ä–µ–º–µ
    
    –ó–Ω–∞—á–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞ –º–µ–Ω—å—à–µ 1000 —Å—á–∏—Ç–∞—é—Ç—Å—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è.
    
    Args:
        domains_data (dict): –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç—Ä–∞—Ñ–∏–∫–µ –ø–æ –¥–æ–º–µ–Ω–∞–º
        mode (str): –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã ('production' –∏–ª–∏ 'test')
    """
    logger.info("–ó–∞–≥—Ä—É–∂–µ–Ω chat_id: %s", chat_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω—ñ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—è
    domains_to_notify = []
    for domain, data in domains_data.items():
        history = data.get('history', [])
        if len(history) >= 2:
            last_entries = sorted(history, key=lambda x: x['date'])
            # –¢–µ–ø–µ—Ä—å —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –¥–∞—Ç–æ–π –¥–≤—É—Ö–Ω–µ–¥–µ–ª—å–Ω–æ–π –¥–∞–≤–Ω–æ—Å—Ç–∏
            traffic_current = last_entries[-1]['traffic']
            traffic_previous = last_entries[-3]['traffic'] if len(last_entries) >= 3 else last_entries[0]['traffic']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ (–±–æ–ª—å—à–µ 1000)
            if traffic_current < 1000 or traffic_previous < 1000:
                logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–º–µ–Ω {domain} –∑-–∑–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å —Ç—Ä–∞—Ñ–∏–∫–∞: —Ç–µ–∫—É—á–∏–π={traffic_current}, –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π={traffic_previous}")
                continue
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—ä–µ–º–∞
            last_change = ((traffic_current - traffic_previous) / traffic_previous) * 100
            
            should_notify = False
            previous_change = None
            triple_change = None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –ø–∞–¥–µ–Ω–∏—è –Ω–∞ 16% –ø—Ä–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å—ä–µ–º–µ
            if last_change <= -16:
                should_notify = True

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –¥–≤—É—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–¥–µ–Ω–∏–π –ø–æ 11%
            if len(history) >= 3:
                traffic_before_previous = last_entries[-3]['traffic']  # –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø—Ä–µ–¥—ã–¥—É—â–∏–º
                if traffic_before_previous >= 1000:
                    previous_change = ((traffic_previous - traffic_before_previous) / traffic_before_previous) * 100
                    if previous_change <= -11 and last_change <= -11:
                        should_notify = True

            # –ù–æ–≤–æ–µ —É—Å–ª–æ–≤–∏–µ: –ø–∞–¥–µ–Ω–∏–µ –±–æ–ª–µ–µ 6% –≤ —Ç—Ä–µ—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ—Ä–µ–Ω–∏—è—Ö –ø–æ–¥—Ä—è–¥
            if len(history) >= 4:
                traffic_3ago = last_entries[-4]['traffic']
                if traffic_3ago >= 1000:
                    change_2 = ((traffic_before_previous - traffic_3ago) / traffic_3ago) * 100
                    if change_2 <= -6 and previous_change is not None and previous_change <= -6 and last_change <= -6:
                        should_notify = True
                        triple_change = change_2
            

            
            if mode == 'test' or should_notify:
                notify_data = {
                    'domain': domain,
                    'traffic': traffic_current,
                    'previous_traffic': traffic_previous,
                    'change': last_change,
                    'previous_change': previous_change if previous_change is not None else 0,
                    'triple_change': triple_change if triple_change is not None else 0
                }
                domains_to_notify.append(notify_data)
    
    if not domains_to_notify:
        if mode == 'test':
            message = "üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ —Ç—Ä–∞—Ñ—ñ–∫\n\n–ù–µ–º–∞—î –¥–æ–º–µ–Ω—ñ–≤ –∑ –∫—Ä–∏—Ç–∏—á–Ω–∏–º –ø–∞–¥—ñ–Ω–Ω—è–º —Ç—Ä–∞—Ñ—ñ–∫—É (–∞–±–æ –∑–Ω–∞—á–µ–Ω–Ω—è —Ç—Ä–∞—Ñ—ñ–∫—É –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ)."
            try:
                get_updater().bot.send_message(chat_id=chat_id, text=message)
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: %s", str(e))
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–º–µ–Ω—ã –ø–æ –≤–µ–ª–∏—á–∏–Ω–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∞–¥–µ–Ω–∏—è (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
    domains_to_notify.sort(key=lambda x: x['change'])
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–æ–º–µ–Ω—ã –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 15 –¥–æ–º–µ–Ω–æ–≤
    chunk_size = 15
    domain_chunks = [domains_to_notify[i:i + chunk_size] for i in range(0, len(domains_to_notify), chunk_size)]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —á–∞—Å—Ç—è–º
    for i, chunk in enumerate(domain_chunks):
        if mode == 'test':
            message = "üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ —Ç—Ä–∞—Ñ—ñ–∫\n\n" if i == 0 else "üîÑ –ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ —Ç—Ä–∞—Ñ—ñ–∫\n\n"
        else:
            message = "‚ö†Ô∏è –í–∏—è–≤–ª–µ–Ω–æ –∫—Ä–∏—Ç–∏—á–Ω–µ –ø–∞–¥—ñ–Ω–Ω—è —Ç—Ä–∞—Ñ—ñ–∫—É\n\n" if i == 0 else "‚ö†Ô∏è –ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –∑–≤—ñ—Ç—É –ø—Ä–æ –ø–∞–¥—ñ–Ω–Ω—è —Ç—Ä–∞—Ñ—ñ–∫—É\n\n"
        
        for domain_data in chunk:
            domain = domain_data['domain']
            traffic = domain_data['traffic']
            change = domain_data['change']
            prev_change = domain_data['previous_change']
            triple_change = domain_data.get('triple_change', 0)


            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–∞–¥–µ–Ω–∏—è
            if change <= -16:
                message += f"{domain}: {traffic:,} (üìâ {change:.1f}% - —Ä—ñ–∑–∫–µ –ø–∞–¥—ñ–Ω–Ω—è)\n"
            elif prev_change <= -11 and change <= -11:
                message += f"{domain}: {traffic:,} (üìâ {change:.1f}%, –ø–æ–ø–µ—Ä. {prev_change:.1f}%)\n"
            elif triple_change != 0 and triple_change <= -6 and prev_change <= -6 and change <= -6:
                message += f"{domain}: {traffic:,} (üìâ {change:.1f}%, —Ç—Ä–∏ –ø–æ—Å–ø—ñ–ª—å –ø–∞–¥—ñ–Ω–Ω—è: {triple_change:.1f}%, {prev_change:.1f}%, {change:.1f}%)\n"
            else:
                message += f"{domain}: {traffic:,} (ÔøΩÔøΩ {change:.1f}%)\n"
        
        try:
            get_updater().bot.send_message(
                chat_id=chat_id,
                text=message,
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: %s", str(e))
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            try:
                get_updater().bot.send_message(chat_id=chat_id, text=message)
            except Exception as e:
                logger.error("–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: %s", str(e))

def send_message_to_chats(message: str, parse_mode: str = None, test_mode: bool = False) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —á–∞—Ç—ã.
    
    Args:
        message (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        parse_mode (str, optional): –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        test_mode (bool): –ï—Å–ª–∏ True, –∏—Å–∫–ª—é—á–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –≤ —Ä–∞–±–æ—á–∏–µ —á–∞—Ç—ã
        
    Returns:
        bool: True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ö–æ—Ç—è –±—ã –≤ –æ–¥–∏–Ω —á–∞—Ç, –∏–Ω–∞—á–µ False
    """
    logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –≤—Å—ñ —á–∞—Ç–∏ (test_mode={test_mode})")
    
    if not TELEGRAM_BOT_TOKEN:
        logger.error("–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π")
        return False
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º ID —á–∞—Ç–æ–≤
    load_chat_id()
    
    if not chat_ids:
        logger.error("–ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —á–∞—Ç—ñ–≤ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏")
        return False
    
    logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(chat_ids)} —á–∞—Ç—ñ–≤ —É —Ñ–∞–π–ª—ñ telegram_chats.json")
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —á–∞—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    target_chat_ids = []
    logger.info(f"–†–æ–±–æ—á—ñ —á–∞—Ç–∏ (PRODUCTION_CHAT_IDS): {PRODUCTION_CHAT_IDS}")
    
    for cid in chat_ids:
        cid_str = str(cid)
        # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–±–æ—á–∏–µ —á–∞—Ç—ã
        if test_mode and cid_str in PRODUCTION_CHAT_IDS:
            logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ä–æ–±–æ—á–∏–π —á–∞—Ç {cid} –≤ —Ç–µ—Å—Ç–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ")
            continue
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∫–æ–π —á–∞—Ç –¥–æ–±–∞–≤–ª—è–µ–º
        is_production = cid_str in PRODUCTION_CHAT_IDS
        logger.info(f"–î–æ–¥–∞—î–º–æ —á–∞—Ç {cid} –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ ({'—Ä–æ–±–æ—á–∏–π' if is_production else '—Ç–µ—Å—Ç–æ–≤–∏–π'})")
        target_chat_ids.append(cid)
    
    logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(target_chat_ids)} –∑ {len(chat_ids)} —á–∞—Ç—ñ–≤ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏")
    
    success = False
    
    # –†–æ–∑–±–∏–≤–∞—î–º–æ –¥–æ–≤–≥–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ (–º–∞–∫—Å 4000 —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è –±–µ–∑–ø–µ–∫–∏)
    max_length = 4000
    message_parts = []
    
    if len(message) <= max_length:
        message_parts = [message]
    else:
        # –†–æ–∑–±–∏–≤–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ —Ä—è–¥–∫–∞—Ö
        lines = message.split('\n')
        current_part = ""
        
        for line in lines:
            if len(current_part + line + '\n') <= max_length:
                current_part += line + '\n'
            else:
                if current_part:
                    message_parts.append(current_part.rstrip())
                    current_part = line + '\n'
                else:
                    # –Ø–∫—â–æ –æ–¥–∏–Ω —Ä—è–¥–æ–∫ –¥–æ–≤—à–∏–π –∑–∞ –º–∞–∫—Å–∏–º—É–º, —Ä–æ–∑–±–∏–≤–∞—î–º–æ –π–æ–≥–æ
                    while len(line) > max_length:
                        message_parts.append(line[:max_length])
                        line = line[max_length:]
                    current_part = line + '\n'
        
        if current_part:
            message_parts.append(current_part.rstrip())
    
    logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ä–æ–∑–±–∏—Ç–æ –Ω–∞ {len(message_parts)} —á–∞—Å—Ç–∏–Ω")
    
    for cid in target_chat_ids:
        chat_success = False
        for i, part in enumerate(message_parts):
            try:
                # –î–æ–¥–∞—î–º–æ –Ω–æ–º–µ—Ä —á–∞—Å—Ç–∏–Ω–∏ —è–∫—â–æ —ó—Ö –±—ñ–ª—å—à–µ –æ–¥–Ω–æ—ó
                final_message = part
                if len(message_parts) > 1:
                    final_message = f"üìÑ –ß–∞—Å—Ç–∏–Ω–∞ {i+1}/{len(message_parts)}\n\n{part}"
                
                logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç {cid} (—á–∞—Å—Ç–∏–Ω–∞ {i+1}/{len(message_parts)})")
                get_updater().bot.send_message(
                    chat_id=cid,
                    text=final_message,
                    parse_mode=parse_mode
                )
                chat_success = True
                logger.info(f"–ß–∞—Å—Ç–∏–Ω–∞ {i+1}/{len(message_parts)} —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç {cid}")
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —á–∞—Å—Ç–∏–Ω–∏ {i+1} –≤ —á–∞—Ç {cid}: {str(e)}")
                try:
                    # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    get_updater().bot.send_message(chat_id=cid, text=final_message)
                    chat_success = True
                    logger.info(f"–ß–∞—Å—Ç–∏–Ω–∞ {i+1} —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤ —á–∞—Ç {cid}")
                except Exception as e2:
                    logger.error(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —á–∞—Å—Ç–∏–Ω–∏ {i+1} –≤ —á–∞—Ç {cid}: {str(e2)}")
        
        if chat_success:
            success = True
    
    return success

def send_message_to_specific_chats(message: str, target_chat_ids: List[str], parse_mode: str = None) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —á–∞—Ç—ã.
    
    Args:
        message (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        target_chat_ids (List[str]): –°–ø–∏—Å–æ–∫ ID —á–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        parse_mode (str, optional): –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        
    Returns:
        bool: True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ö–æ—Ç—è –±—ã –≤ –æ–¥–∏–Ω —á–∞—Ç, –∏–Ω–∞—á–µ False
    """
    logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —á–∞—Ç–∏: {target_chat_ids}")
    
    if not TELEGRAM_BOT_TOKEN:
        logger.error("–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π")
        return False
    
    success = False
    
    # –†–æ–∑–±–∏–≤–∞—î–º–æ –¥–æ–≤–≥–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ (–º–∞–∫—Å 4000 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –±–µ–∑–ø–µ–∫–∏)
    max_length = 4000
    message_parts = []
    
    if len(message) <= max_length:
        message_parts = [message]
    else:
        # –†–æ–∑–±–∏–≤–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ —Ä—è–¥–∫–∞—Ö
        lines = message.split('\n')
        current_part = ""
        
        for line in lines:
            if len(current_part + line + '\n') <= max_length:
                current_part += line + '\n'
            else:
                if current_part:
                    message_parts.append(current_part.rstrip())
                    current_part = line + '\n'
                else:
                    # –Ø–∫—â–æ –æ–¥–∏–Ω —Ä—è–¥–æ–∫ –¥–æ–≤—à–∏–π –∑–∞ –º–∞–∫—Å–∏–º—É–º, —Ä–æ–∑–±–∏–≤–∞—î–º–æ –π–æ–≥–æ
                    while len(line) > max_length:
                        message_parts.append(line[:max_length])
                        line = line[max_length:]
                    current_part = line + '\n'
        
        if current_part:
            message_parts.append(current_part.rstrip())
    
    logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ä–æ–∑–±–∏—Ç–æ –Ω–∞ {len(message_parts)} —á–∞—Å—Ç–∏–Ω")
    
    for chat_id in target_chat_ids:
        chat_success = False
        for i, part in enumerate(message_parts):
            try:
                # –î–æ–¥–∞—î–º–æ –Ω–æ–º–µ—Ä —á–∞—Å—Ç–∏–Ω–∏ —è–∫—â–æ —ó—Ö –±—ñ–ª—å—à–µ –æ–¥–Ω–æ—ó
                final_message = part
                if len(message_parts) > 1:
                    final_message = f"üìÑ –ß–∞—Å—Ç–∏–Ω–∞ {i+1}/{len(message_parts)}\n\n{part}"
                
                logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç {chat_id} (—á–∞—Å—Ç–∏–Ω–∞ {i+1}/{len(message_parts)})")
                get_updater().bot.send_message(
                    chat_id=int(chat_id),
                    text=final_message,
                    parse_mode=parse_mode
                )
                chat_success = True
                logger.info(f"–ß–∞—Å—Ç–∏–Ω–∞ {i+1}/{len(message_parts)} —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç {chat_id}")
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —á–∞—Å—Ç–∏–Ω–∏ {i+1} –≤ —á–∞—Ç {chat_id}: {str(e)}")
                try:
                    # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    get_updater().bot.send_message(chat_id=int(chat_id), text=final_message)
                    chat_success = True
                    logger.info(f"–ß–∞—Å—Ç–∏–Ω–∞ {i+1} —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤ —á–∞—Ç {chat_id}")
                except Exception as e2:
                    logger.error(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —á–∞—Å—Ç–∏–Ω–∏ {i+1} –≤ —á–∞—Ç {chat_id}: {str(e2)}")
        
        if chat_success:
            success = True
    
    return success

def send_message(message: str, parse_mode: str = None, test_mode: bool = False, target_chat_ids: List[str] = None) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç Telegram.
    –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º + –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ –≤—Å–µ —á–∞—Ç—ã.
    
    Args:
        message (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        parse_mode (str, optional): –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        test_mode (bool): –ï—Å–ª–∏ True, –∏—Å–∫–ª—é—á–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –≤ —Ä–∞–±–æ—á–∏–µ —á–∞—Ç—ã
        target_chat_ids (List[str], optional): –°–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        
    Returns:
        bool: True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
    """
    logger.info("–ü–æ—á–∏–Ω–∞—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram")
    
    if not TELEGRAM_BOT_TOKEN:
        logger.error("–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π")
        return False
    
    logger.info(f"–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∑–Ω–∞–π–¥–µ–Ω–∏–π, –¥–æ–≤–∂–∏–Ω–∞: {len(TELEGRAM_BOT_TOKEN)}")
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —á–∞—Ç—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤ –Ω–∏—Ö
    if target_chat_ids:
        return send_message_to_specific_chats(message, target_chat_ids, parse_mode)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Å–µ —á–∞—Ç—ã
    return send_message_to_chats(message, parse_mode, test_mode)

def run_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞."""
    if not TELEGRAM_BOT_TOKEN:
        logger.error("–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π")
        return
        
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π chat_id –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        load_chat_id()
        
        updater = get_updater()
        dispatcher = updater.dispatcher
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö, –∏ –≤ –≥—Ä—É–ø–ø–∞—Ö
        dispatcher.add_handler(CommandHandler("start", start, filters=Filters.chat_type.private | Filters.chat_type.groups))
        dispatcher.add_handler(CommandHandler("help", help_command, filters=Filters.chat_type.private | Filters.chat_type.groups))
        dispatcher.add_handler(CommandHandler("status", status, filters=Filters.chat_type.private | Filters.chat_type.groups))
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
        logger.info("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —ñ –≥–æ—Ç–æ–≤ –æ–±—Ä–æ–±–ª—è—Ç–∏ –∫–æ–º–∞–Ω–¥–∏ –≤ –æ—Å–æ–±–∏—Å—Ç–∏—Ö —ñ –≥—Ä—É–ø–æ–≤–∏—Ö —á–∞—Ç–∞—Ö")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        updater.start_polling()
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–æ –Ω–∞–∂–∞—Ç–∏—è Ctrl+C
        updater.idle()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É Telegram –±–æ—Ç–∞: {str(e)}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")

if __name__ == "__main__":
    run_bot() 