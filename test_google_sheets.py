#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
"""

import logging
import os
import json
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from config import MAIN_SHEET_ID

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_google_sheets_connection():
    """–¢–µ—Å—Ç—É—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets"""
    try:
        # ID —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        SPREADSHEET_ID = MAIN_SHEET_ID
        
        logger.info(f"üîó –¢–µ—Å—Ç—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets")
        logger.info(f"üìä ID —Ç–∞–±–ª–∏—Ü—ñ: {SPREADSHEET_ID}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ credentials
        credentials_json = os.getenv('GOOGLE_SHEETS_CREDENTIALS')
        if not credentials_json:
            logger.error("‚ùå GOOGLE_SHEETS_CREDENTIALS –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
            return False
        
        logger.info("‚úÖ GOOGLE_SHEETS_CREDENTIALS –∑–Ω–∞–π–¥–µ–Ω–∏–π")
        
        # –ü–∞—Ä—Å–∏–Ω–≥ credentials
        try:
            credentials_dict = json.loads(credentials_json)
            logger.info("‚úÖ Credentials —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–ø–∞—Ä—Å–µ–Ω–∏–π")
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É credentials: {e}")
            return False
        
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è
        credentials = Credentials.from_service_account_info(
            credentials_dict,
            scopes=['https://www.googleapis.com/auth/spreadsheets']
        )
        logger.info("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—É
        service = build('sheets', 'v4', credentials=credentials)
        logger.info("‚úÖ Google Sheets API —Å–µ—Ä–≤—ñ—Å —Å—Ç–≤–æ—Ä–µ–Ω–∏–π")
        
        # –ß–∏—Ç–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Ç–∞–±–ª–∏—Ü—ñ
        logger.info("üìñ –ß–∏—Ç–∞—î–º–æ –¥–∞–Ω—ñ –∑ —Ç–∞–±–ª–∏—Ü—ñ...")
        range_name = 'A1:Z1000'  # –ß–∏—Ç–∞—î–º–æ —à–∏—Ä–æ–∫–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω
        result = service.spreadsheets().values().get(
            spreadsheetId=SPREADSHEET_ID,
            range=range_name
        ).execute()
        
        values = result.get('values', [])
        logger.info(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ {len(values)} —Ä—è–¥–∫—ñ–≤")
        
        if not values:
            logger.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è –∞–±–æ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö")
            return True
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–∏—Ö
        header_row = values[0] if values else []
        logger.info(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ ({len(header_row)} —Å—Ç–æ–≤–ø—Ü—ñ–≤): {header_row[:10]}{'...' if len(header_row) > 10 else ''}")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –∫—ñ–ª—å–∫–∞ –ø–µ—Ä—à–∏—Ö —Ä—è–¥–∫—ñ–≤ –¥–∞–Ω–∏—Ö
        data_rows = values[1:6] if len(values) > 1 else []
        logger.info(f"üìä –ü–µ—Ä—à—ñ {len(data_rows)} —Ä—è–¥–∫—ñ–≤ –¥–∞–Ω–∏—Ö:")
        for i, row in enumerate(data_rows, 1):
            domain = row[0] if len(row) > 0 else 'N/A'
            traffic_values = []
            for col_index in range(1, min(len(row), 6)):
                try:
                    if row[col_index]:
                        traffic_values.append(int(row[col_index]))
                except (ValueError, TypeError):
                    continue
            logger.info(f"   {i}. {domain}: {traffic_values}")
        
        # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –≤–∞–ª—ñ–¥–Ω–∏—Ö –¥–æ–º–µ–Ω—ñ–≤
        valid_domains = 0
        for row in values[1:]:
            if len(row) > 0 and row[0]:  # –Ñ –¥–æ–º–µ–Ω
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ö–æ—á–∞ –± –¥–≤–∞ —á–∏—Å–ª–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω–Ω—è
                traffic_count = 0
                for col_index in range(1, len(row)):
                    try:
                        if row[col_index]:
                            int(row[col_index])
                            traffic_count += 1
                    except (ValueError, TypeError):
                        continue
                if traffic_count >= 2:
                    valid_domains += 1
        
        logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {valid_domains} –¥–æ–º–µ–Ω—ñ–≤ –∑ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ Google Sheets: {e}")
        import traceback
        logger.error(f"–î–µ—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {traceback.format_exc()}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è Google Sheets")
    
    success = test_google_sheets_connection()
    
    if success:
        logger.info("üéâ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        print("üéâ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets –ø—Ä–∞—Ü—é—î!")
    else:
        logger.error("üí• –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –∑ –ø–æ–º–∏–ª–∫–∞–º–∏")
        print("üí• –í–∏–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º –¥–æ Google Sheets")

if __name__ == "__main__":
    main() 