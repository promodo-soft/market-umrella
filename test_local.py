#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è API Ahrefs –±–µ–∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets
"""
import os
import sys
import logging
from datetime import datetime

# –î–æ–¥–∞—î–º–æ –ø–∞—Ç—á –¥–ª—è AHREFS_API_TOKEN
try:
    import monkey_patch  # noqa
except ImportError:
    pass

from telegram_bot import send_message
from ahrefs_api import check_api_availability, get_organic_traffic

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def check_env_variables():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"""
    logger.info("=== –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ ===")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
    variables = {
        'TELEGRAM_BOT_TOKEN': os.getenv('TELEGRAM_BOT_TOKEN'),
        'AHREFS_API_KEY': os.getenv('AHREFS_API_KEY')
    }
    
    for name, value in variables.items():
        if value:
            logger.info(f"{name}: –∑–Ω–∞–π–¥–µ–Ω–∏–π (–¥–æ–≤–∂–∏–Ω–∞: {len(value)})")
        else:
            logger.error(f"{name}: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
    
    return all(variables.values())

def test_api():
    """–¢–µ—Å—Ç—É—î –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å API Ahrefs"""
    logger.info("=== –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ API Ahrefs ===")
    
    if check_api_availability():
        logger.info("‚úÖ API Ahrefs –¥–æ—Å—Ç—É–ø–Ω–∏–π")
        return True
    else:
        logger.error("‚ùå API Ahrefs –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
        return False

def test_domains():
    """–¢–µ—Å—Ç—É—î –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—Ä–∞—Ñ—ñ–∫—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–æ–º–µ–Ω—ñ–≤"""
    logger.info("=== –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—Ä–∞—Ñ—ñ–∫—É ===")
    
    # –¢–µ—Å—Ç–æ–≤—ñ –¥–æ–º–µ–Ω–∏
    test_domains = ['ahrefs.com', 'example.com', 'google.com']
    
    results = {}
    for domain in test_domains:
        logger.info(f"–ó–∞–ø–∏—Ç —Ç—Ä–∞—Ñ—ñ–∫—É –¥–ª—è {domain}...")
        traffic = get_organic_traffic(domain)
        results[domain] = traffic
        logger.info(f"{domain}: —Ç—Ä–∞—Ñ—ñ–∫ = {traffic}")
    
    return results

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    logger.info("=== –ü–æ—á–∞—Ç–æ–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è ===")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    if not check_env_variables():
        logger.error("–í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
        return False
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ API
    if not test_api():
        error_message = "‚ùå –ü–æ–º–∏–ª–∫–∞: API Ahrefs –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –∞–±–æ –Ω–µ–≤—ñ—Ä–Ω–∏–π –∫–ª—é—á API"
        logger.error(error_message)
        send_message(error_message, test_mode=True)
        return False
    
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–æ–º–µ–Ω—ñ–≤
    results = test_domains()
    
    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if results:
        message = "‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API Ahrefs –ø—Ä–æ–π—à–ª–æ —É—Å–ø—ñ—à–Ω–æ\n\n"
        message += "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç—Ä–∞—Ñ—ñ–∫—É:\n"
        for domain, traffic in results.items():
            message += f"{domain}: {traffic:,}\n"
        
        # –î–æ–¥–∞—î–º–æ –≤—ñ–¥–º—ñ—Ç–∫—É —á–∞—Å—É
        now = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
        message += f"\nüìÜ –î–∞–Ω—ñ –ø–æ—Ä—ñ–≤–Ω—é—é—Ç—å—Å—è –∑ –ø–æ–∫–∞–∑–Ω–∏–∫–∞–º–∏ —Ç–∏–∂–Ω–µ–≤–æ—ó –¥–∞–≤–Ω–∏–Ω–∏"
        message += f"\nüìÖ –î–∞—Ç–∞ –∑–≤—ñ—Ç—É: {now}"
        
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram
        if send_message(message, test_mode=True):
            logger.info("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
        
        logger.info("=== –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ ===")
        return True
    else:
        error_message = "‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç—Ä–∞—Ñ—ñ–∫ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–æ–º–µ–Ω—ñ–≤"
        logger.error(error_message)
        send_message(error_message, test_mode=True)
        logger.info("=== –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏ ===")
        return False

if __name__ == "__main__":
    success = main()
    if not success:
        sys.exit(1) 